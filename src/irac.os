///////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ЗАПУСКОМ КОМАНД 1С:Предприятия 8
//

#Использовать logos
#Использовать tempfiles
#Использовать asserts
#Использовать strings
#Использовать 1commands
#Использовать v8runner

Перем мКонтекстКоманды;
Перем мКаталогСборки;
Перем мВыводКоманды;
Перем мПутьКПлатформе1С;
Перем ЭтоWindows Экспорт;
Перем мВерсияПлатформы;
Перем мИсключениеПриОшибкеВыполненияКоманды;

Перем Лог;
Перем мИмяФайлаИнформации;
Перем мФайлИнформацииВнешний;
Перем мОчищатьФайлИнформации;
Перем мТекстФайлаДоВывода;
Перем мОбработчикОжиданияПроцессаGUI;

Перем мПризнакОжиданияВыполненияПрограммы;

//////////////////////////////////////////////////////////////////////////////////
// Программный интерфейс

Процедура УстановитьКонтекст(Знач Сервер, Знач Порт) Экспорт
	мКонтекстКоманды.Сервер = Сервер;
	мКонтекстКоманды.Порт = Порт;

	ПоказатьКонтекстВРежимеОтладки();
КонецПроцедуры

Функция ПолучитьКонтекст() Экспорт
	КопияКонтекста = СкопироватьСтруктуру(мКонтекстКоманды);
	Возврат КопияКонтекста;
КонецФункции

Процедура ИспользоватьКонтекст(Знач Контекст) Экспорт
	мКонтекстКоманды = СкопироватьСтруктуру(Контекст);
	ПоказатьКонтекстВРежимеОтладки();
КонецПроцедуры

Процедура ПоказатьКонтекстВРежимеОтладки()
	Лог.Отладка("Сервер " + мКонтекстКоманды.Сервер);
	Лог.Отладка("Порт <" + мКонтекстКоманды.Порт + ">");
	//Лог.Отладка(?(ПустаяСтрока(мКонтекстКоманды.Пароль), "Пароль не задан", " Задан пароль "+ мКонтекстКоманды.Пароль));
КонецПроцедуры

Функция ПолучитьСписокКластеров() Экспорт
	
	Параметры = СтандартныеПараметрыЗапускаКлиента();

	Параметры.Добавить("cluster");
	Параметры.Добавить("list");

	ВыполнитьКоманду(Параметры);

	МассивРезультатов = РазобратьВыводКоманды(мВыводКоманды);

	Для Каждого ТекОписание Из МассивРезультатов Цикл
		
		Для Каждого ТекАтрибут Из ТекОписание Цикл
			Сообщить(ТекАтрибут.Ключ + " : " + ТекАтрибут.Значение);
		КонецЦикла;
	КонецЦикла;

	Лог.Информация(мВыводКоманды);
	
	Возврат МассивРезультатов;

КонецФункции
	
Функция ПолучитьСписокБаз(НомерКластера = 0) Экспорт
	
	МассивКластеров = ПолучитьСписокКластеров();

	Параметры = СтандартныеПараметрыЗапускаКлиента();

	Параметры.Добавить("infobase");
	Параметры.Добавить(СтрШаблон("--cluster=%1", МассивКластеров[НомерКластера].Получить("cluster")));
	Параметры.Добавить("summary");
	Параметры.Добавить("list");
	
	ВыполнитьКоманду(Параметры);

	МассивРезультатов = РазобратьВыводКоманды(мВыводКоманды);

	Для Каждого ТекОписание Из МассивРезультатов Цикл
		
		Для Каждого ТекАтрибут Из ТекОписание Цикл
			Сообщить(ТекАтрибут.Ключ + " : " + ТекАтрибут.Значение);
		КонецЦикла;
	КонецЦикла;

	Лог.Информация(мВыводКоманды);
	
	Возврат МассивРезультатов;

КонецФункции
	
Функция ВыполнитьКоманду(Знач Параметры) Экспорт

	//ПроверитьВозможностьВыполненияКоманды();

	СохранитьТекстФайлаИнформации();

	КодВозврата = ЗапуститьИПодождать(Параметры);

	//УстановитьВывод(ПрочитатьФайлИнформации());
	
	Если КодВозврата <> 0 и мИсключениеПриОшибкеВыполненияКоманды Тогда
		Лог.Ошибка("Получен ненулевой код возврата "+КодВозврата+". Выполнение скрипта остановлено!");
		ВызватьИсключение ВыводКоманды();
	Иначе
		Лог.Отладка("Код возврата равен 0");
	КонецЕсли;

	Возврат КодВозврата;

КонецФункции


Процедура ДобавитьФлагПроверки(Знач Параметры, Знач ФлагПроверки, Знач ИмяФлага)

	Если ФлагПроверки Тогда
		Параметры.Добавить(ИмяФлага);
	КонецЕсли;

КонецПроцедуры

Функция КаталогСодержитФайлОбновления(Знач КаталогВерсии)

	ФайлОбновления = Новый Файл(ОбъединитьПути(КаталогВерсии, "1cv8.cfu"));
	Возврат ФайлОбновления.Существует();

КонецФункции

Функция ПутьКВременнойБазе() Экспорт
	Возврат ОбъединитьПути(КаталогСборки(), "v8r_TempDB");
КонецФункции

//////////////////////////////////////////////////
// Вспомогательные и настроечные функции

Функция СтандартныеПараметрыЗапускаКлиента()
	
	Лог.Отладка("Сервер " + мКонтекстКоманды.Сервер);
	Лог.Отладка("Порт <" + мКонтекстКоманды.Порт + ">");

	ПараметрыЗапуска = Новый Массив;

	Сервер = "";
	Если Не ПустаяСтрока(мКонтекстКоманды.Сервер) Тогда
		Сервер = мКонтекстКоманды.Сервер;
		Если Не ПустаяСтрока(мКонтекстКоманды.Порт) Тогда
			Сервер = Сервер + ":" + мКонтекстКоманды.Порт;
		КонецЕсли;
	КонецЕсли;
			
	Если Не ПустаяСтрока(Сервер) Тогда
		ПараметрыЗапуска.Добавить(Сервер);
	КонецЕсли;

	Возврат ПараметрыЗапуска;

КонецФункции
	
Функция ПолучитьПутьКВерсииПлатформы(Знач ВерсияПлатформы) Экспорт

	Если Лев(ВерсияПлатформы, 2) <> "8." Тогда
		ВызватьИсключение "Неверная версия платформы <"+ВерсияПлатформы+">";
	КонецЕсли;
	
	Если ЭтоWindows = Истина Тогда
	
		СписокСтрок = РазложитьСтрокуВМассивПодстрок(ВерсияПлатформы, ".");
		Если СписокСтрок.Количество() < 2 Тогда
			ВызватьИсключение "Маска версии платформы должна содержать, как минимум, минорную и мажорную версию, т.е. Maj.Min[.Release][.Build]";
		КонецЕсли;
		
		КаталогиУстановкиПлатформы = СобратьВозможныеКаталогиУстановкиПлатформыWindows();
		
		Если КаталогиУстановкиПлатформы.Количество() = 0 Тогда
			Лог.Отладка("В конфигах стартера не найдены пути установки. Пробую стандартные пути наугад.");
			файлProgramFiles = Новый Файл("C:\Program Files (x86)\");
			Если Не файлProgramFiles.Существует() Тогда
				файлProgramFiles = Новый Файл("C:\Program Files\");
				Если Не файлProgramFiles.Существует() Тогда
					ВызватьИсключение "Не обнаружено установленных версий платформы 1С";
				КонецЕсли;
			КонецЕсли;
			
			КаталогиУстановкиПлатформы.Добавить(ОбъединитьПути(файлProgramFiles.ПолноеИмя, "1Cv8"));
			КаталогиУстановкиПлатформы.Добавить(ОбъединитьПути(файлProgramFiles.ПолноеИмя, "1Cv82"));
			
		КонецЕсли;
		
		МассивКаталогов1С = Новый Массив;
		Для Каждого ВозможныйПуть Из КаталогиУстановкиПлатформы Цикл
		
			Лог.Отладка("Выполняю попытку поиска версии в каталоге " + ВозможныйПуть);
			
			МассивФайлов = НайтиФайлы(ВозможныйПуть, ВерсияПлатформы+"*");
			Если МассивФайлов.Количество() = 0 Тогда
				Лог.Отладка("Не найдено ни одного каталога с версией в %1", ВозможныйПуть);
				Продолжить;
			КонецЕсли;
			Если МассивКаталогов1С = Неопределено Тогда
				МассивКаталогов1С = МассивФайлов;
			Иначе
				Для каждого Подкаталог1С Из МассивФайлов Цикл
					Файл1cv8 = Новый Файл(ОбъединитьПути(Подкаталог1С.ПолноеИмя, "bin", "1cv8.exe"));
					Если Файл1cv8.Существует() Тогда
						ОписаниеКаталога = Новый Структура("Версия, ФайлКлиента1С", Подкаталог1С.Имя, Файл1cv8);
						МассивКаталогов1С.Добавить(ОписаниеКаталога);
						Лог.Отладка("Нашел платформу 1С %1", Подкаталог1С.Имя);
					Иначе
						Лог.Отладка("Пропускаю каталог 1С %1", Подкаталог1С.Имя);
					КонецЕсли;	 
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		НужныйФайлПлатформы = Неопределено;

		МассивКаталоговВерсий = Новый Массив;
		Для Каждого ОписаниеКаталога Из МассивКаталогов1С Цикл
			правыйСимвол = Прав(ОписаниеКаталога.Версия, 1);
			Если правыйСимвол < "0" или правыйСимвол > "9" Тогда
				Продолжить;
			КонецЕсли;
			МассивКаталоговВерсий.Добавить(ОписаниеКаталога);
		КонецЦикла;

		Если МассивКаталоговВерсий.Количество() > 0 Тогда
			ОписаниеМаксВерсии = МассивКаталоговВерсий[0];
			Для Сч = 1 По МассивКаталоговВерсий.ВГраница() Цикл
				Если СтроковыеФункции.СравнитьВерсии(МассивКаталоговВерсий[Сч].Версия, ОписаниеМаксВерсии.Версия) > 0 Тогда
					ОписаниеМаксВерсии = МассивКаталоговВерсий[Сч];
				КонецЕсли;	 
  			КонецЦикла;
			НужныйФайлПлатформы = ОписаниеМаксВерсии.ФайлКлиента1С;
			мВерсияПлатформы = ОписаниеМаксВерсии.Версия;
			Лог.Отладка("Версия найдена: " + НужныйФайлПлатформы.ПолноеИмя);
	
		КонецЕсли;
		
		Если НужныйФайлПлатформы = Неопределено Тогда
			ВызватьИсключение "Не найден путь к платформе 1С <"+ВерсияПлатформы+">";
		КонецЕсли;

	Иначе
		// help wanted: на Линукс конфиг стартера лежит в ~/.1C/1cestart.
		КорневойПуть1С = ОбъединитьПути("/opt", "1C", "v8.3");
		КаталогУстановки = Новый Файл(ОбъединитьПути(КорневойПуть1С, "i386"));
		Если НЕ КаталогУстановки.Существует() Тогда
			КаталогУстановки = Новый Файл(ОбъединитьПути(КорневойПуть1С, "x86_64"));
		КонецЕсли;
		//Определим версию приложения
		ФайлРАК = Новый Файл(ОбъединитьПути(КаталогУстановки.ПолноеИмя, "rac"));
		Если ФайлРАК.Существует() Тогда
			Команда = Новый Команда;
			СтрокаЗапуска = ФайлРАК.ПолноеИмя + " -v ";
			Команда.УстановитьСтрокуЗапуска(СтрокаЗапуска);
			Команда.УстановитьПравильныйКодВозврата(0);
			Попытка
				Команда.Исполнить();
				мВерсияПлатформы = СокрЛП(Команда.ПолучитьВывод());
			Исключение
				Лог.Предупреждение("Не удалось прочитать версию 1С %1, %2.
				|" + ОписаниеОшибки(), ВерсияПлатформы, СтрокаЗапуска);
			КонецПопытки;
		КонецЕсли;
		НужныйФайлПлатформы = Новый Файл(ОбъединитьПути(КаталогУстановки.ПолноеИмя, "1cv8"));
	КонецЕсли;
	
	Если Не НужныйФайлПлатформы.Существует() Тогда
		ВызватьИсключение "Ошибка определения версии платформы. Файл <"+НужныйФайлПлатформы.ПолноеИмя+"> не существует";
	КонецЕсли;

	Возврат ОбъединитьПути(НужныйФайлПлатформы.Путь, СтрЗаменить(НужныйФайлПлатформы.Имя, "1cv8", "rac"));

КонецФункции

Функция ВыводКоманды() Экспорт
	Возврат мВыводКоманды;
КонецФункции

Функция КаталогСборки(Знач Каталог = "") Экспорт

	Если мКаталогСборки = Неопределено Тогда
		мКаталогСборки = ТекущийКаталог();
	КонецЕсли;

	Если Каталог = "" Тогда
		Возврат мКаталогСборки;
	Иначе
		ТекКаталог = мКаталогСборки;
		мКаталогСборки = Каталог;
		Возврат ТекКаталог;
	КонецЕсли;

КонецФункции

Функция ПутьКПлатформе1С(Знач Путь = "") Экспорт

	Если Путь = "" Тогда
		Возврат мПутьКПлатформе1С;
	Иначе
		ФайлПлатформы = Новый Файл(Путь);
		Если Не ФайлПлатформы.Существует() Тогда
			ВызватьИсключение "Нельзя установить несуществующий путь к платформе: " + ФайлПлатформы.ПолноеИмя;
		КонецЕсли;

		ТекЗначение = мПутьКПлатформе1С;
		мПутьКПлатформе1С = Путь;
		Возврат ТекЗначение;
	КонецЕсли;

КонецФункции

Процедура ИспользоватьВерсиюПлатформы(Знач МаскаВерсии) Экспорт
	Путь = ПолучитьПутьКВерсииПлатформы(МаскаВерсии);
	ПутьКПлатформе1С(Путь);
КонецПроцедуры

//  Установка файла для вывода служебных сообщений. Если задан параметр ОчищатьФайл=Ложь, файл не очищается.
//
// Параметры:
//  ПолныйПутьКФайлу - Строка - Полный путь к файлу, например, g:\temp\1c.log
//  ОчищатьФайл      - Булево - Если Истина, то перед операцией файл будет удаляться, иначе будет происходить дозапись
//
Процедура УстановитьИмяФайлаСообщенийПлатформы(Знач ПолныйПутьКФайлу, Знач ОчищатьФайл = Истина) Экспорт
	мИмяФайлаИнформации = ПолныйПутьКФайлу; // если будет абс. путь, то ОбъединитьПути отработает корректно.
	мФайлИнформацииВнешний = Истина;
	мОчищатьФайлИнформации = ОчищатьФайл;
КонецПроцедуры

// УстановитьПризнакОжиданияВыполненияПрограммы
//
// Параметры:
//   НовыйПризнак - <Булево> - Новое значение признака
//
//  Возвращаемое значение:
//   <Булево> - прежнее значение признака
//
Функция УстановитьПризнакОжиданияВыполненияПрограммы(НовыйПризнак) Экспорт

	Ожидаем.Что(НовыйПризнак = Ложь или НовыйПризнак = Истина, 
		"Параметр признак ожидания выполнения программы 1С должен быть или Истина или Ложь, а это не так").ЭтоИстина();

	СтарыйПризнак = мПризнакОжиданияВыполненияПрограммы;
	мПризнакОжиданияВыполненияПрограммы = НовыйПризнак;

	Возврат СтарыйПризнак;

КонецФункции // УстановитьРежимОжиданияВыполненияПрограммы() Экспорт

// ИсключениеПриОшибкеВыполненияКоманды
//
// Параметры:
//   НовоеЗначение - <Булево> - Новое значение флага "ИсключениеПриОшибкеВыполненияКоманды"
//								если не указано, то возвращается текущее значение 
//
//  Возвращаемое значение:
//   <Булево> - значение признака
//
Функция ИсключениеПриОшибкеВыполненияКоманды(НовоеЗначение = Неопределено) Экспорт
	
	Ожидаем.Что(НовоеЗначение = Ложь или НовоеЗначение = Истина или НовоеЗначение = Неопределено, 
		"Параметр ""Исключение при ошибке выполнения команды"" должен быть или Истина, Ложь или Неопределено, а это не так").ЭтоИстина();
	
	Если НЕ НовоеЗначение = Неопределено Тогда
		мИсключениеПриОшибкеВыполненияКоманды = НовоеЗначение;
	КонецЕсли;

	Возврат мИсключениеПриОшибкеВыполненияКоманды;

КонецФункции // ИсключениеПриОшибкеВыполненияКоманды() Экспорт
	
Функция СобратьВозможныеКаталогиУстановкиПлатформыWindows()

	СИ = Новый СистемнаяИнформация;
		
	// Ищем в расположениях для Vista и выше.
	// Желающие поддержать пути в Windows XP - welcome
	КаталогВсеПользователи = ПолучитьПеременнуюСреды("ALLUSERSPROFILE");
	КаталогТекущегоПользователя = ПолучитьПеременнуюСреды("APPDATA");
	
	МассивПутей = Новый Массив;
	СуффиксРасположения = "1C\1CEStart\1CEStart.cfg";
	
	ОбщийКонфиг = ОбъединитьПути(КаталогВсеПользователи, СуффиксРасположения);
	ДополнитьМассивРасположенийИзКонфигурационногоФайла(ОбщийКонфиг, МассивПутей);
	
	ПользовательскийКонфиг = ОбъединитьПути(КаталогТекущегоПользователя, СуффиксРасположения);
	ДополнитьМассивРасположенийИзКонфигурационногоФайла(ПользовательскийКонфиг, МассивПутей);
	
	Возврат МассивПутей;
	
КонецФункции

Процедура ДополнитьМассивРасположенийИзКонфигурационногоФайла(Знач ИмяФайла, Знач МассивПутей)
	
	ФайлКонфига = Новый Файл(ИмяФайла);
	Если Не ФайлКонфига.Существует() Тогда
		Лог.Отладка("Конфигурационный файл " + ИмяФайла + " не найден.");
		Возврат;
	КонецЕсли;
	
	Лог.Отладка("Читаю конфигурационный файл " + ИмяФайла + ".");
	Конфиг = Новый КонфигурацияСтартера;
	Конфиг.Открыть(ИмяФайла);
	
	Значения = Конфиг.ПолучитьСписок("InstalledLocation");
	Если Значения <> Неопределено Тогда
		Для Каждого Путь Из Значения Цикл
			МассивПутей.Добавить(Путь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры

Функция РазобратьВыводКоманды(Знач ВыводКоманды)

	Текст = Новый ТекстовыйДокумент();
	Текст.УстановитьТекст(ВыводКоманды);

	МассивРезультатов = Новый Массив();
	Описание = Новый Соответствие();

	Для й = 1 По Текст.КоличествоСтрок() Цикл
		ТекстСтроки = Текст.ПолучитьСтроку(й);
		
		Если НЕ ЗначениеЗаполнено(ТекстСтроки) Тогда
			МассивРезультатов.Добавить(Описание);
			Описание = Новый Соответствие();
			Продолжить;
		ИначеЕсли СтрНайти(ТекстСтроки, ":") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СодержимоеСтроки = СтрРазделить(ТекстСтроки, ":");
		
		Описание.Вставить(СокрЛП(СодержимоеСтроки[0]), СокрЛП(СодержимоеСтроки[1]));

	КонецЦикла;

	Возврат МассивРезультатов;

КонецФункции

// При запуска в режиме предприятия часто приложение GUI возвращает в оболочку ОК сразу после старта (а не после завершения)
//
// Параметры:
//   ОбъектОбработчик - Объект с экспортным методом ОбработкаОжиданияПроцесса(Отказ, Интервал)
//   Интервал - Интервал ожидания (мс) через который вызывается ОбработкаОжиданияПроцесса, если он не завершен
//
Процедура УстановитьОбработчикОжидания(Знач ОбъектОбработчик, Знач Интервал = 5000) Экспорт
	
	мОбработчикОжиданияПроцессаGUI = Новый Структура;
	мОбработчикОжиданияПроцессаGUI.Вставить("Объект", ОбъектОбработчик);
	мОбработчикОжиданияПроцессаGUI.Вставить("Интервал", Интервал);

КонецПроцедуры

Функция ЗапуститьИПодождать(Знач Параметры)

	СтрокаЗапуска = "";
	СтрокаДляЛога = "";
	Для Каждого Параметр Из Параметры Цикл

		СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;

		Если Лев(Параметр,2) <> "/P" и Лев(Параметр,25) <> "/ConfigurationRepositoryP" Тогда
			СтрокаДляЛога = СтрокаДляЛога + " " + Параметр;
		КонецЕсли;

	КонецЦикла;

	КодВозврата = 0;

	Приложение = ОбернутьВКавычки(ПутьКПлатформе1С());
	Лог.Отладка(Приложение + СтрокаДляЛога);

	Команда = Новый Команда;
	
	Команда.УстановитьКоманду(Приложение);
	//Команда.УстановитьКодировкуВывода("Windows-1251");
	Команда.УстановитьКодировкуВывода(КодировкаТекста.OEM);
	//Команда.ДобавитьЛогВыводаКоманды("ktb.lib.irac");
	Команда.ДобавитьПараметры(Параметры);
	Команда.УстановитьИсполнениеЧерезКомандыСистемы(Ложь);
	Команда.ПоказыватьВыводНемедленно(Ложь);
	КодВозврата = Команда.Исполнить();
	
	УстановитьВывод(Команда.ПолучитьВывод());

	Лог.Отладка("Получен код возврата %1", КодВозврата);
	
	Возврат КодВозврата;

КонецФункции

Процедура ЗапуститьПроцессGUI(Знач СтрокаЗапуска, КодВозврата)

	Процесс = СоздатьПроцесс(СтрокаЗапуска);
	Процесс.Запустить();

	Лог.Отладка("Стартовал процесс в режиме GUI, PID:%1", Процесс.Идентификатор);
	Приостановить(3000); // инициализация 1С

	Пока Не Процесс.Завершен Цикл

		Если мОбработчикОжиданияПроцессаGUI.Интервал > 0 Тогда
			Лог.Отладка("Пауза %1 секунд", мОбработчикОжиданияПроцессаGUI.Интервал);
			Приостановить(мОбработчикОжиданияПроцессаGUI.Интервал);
		КонецЕсли;

		Отказ = Ложь;
		Лог.Отладка("Вызов обработчика ожидания");
		Попытка
			мОбработчикОжиданияПроцессаGUI.Объект.ОбработкаОжиданияПроцесса(Отказ, мОбработчикОжиданияПроцессаGUI.Интервал);
		Исключение
			Лог.Отладка(ОписаниеОшибки());
			ВызватьИсключение;
		КонецПопытки;

		Если Отказ = Истина Тогда
			КодВозврата = -1;
			Лог.Отладка("Получен отказ");
			Возврат;
		КонецЕсли;

	КонецЦикла;

	Лог.Отладка("Процесс завершен.");
	КодВозврата = Процесс.КодВозврата;

КонецПроцедуры

Функция ПрочитатьФайлИнформации()

	Текст = "";

	Файл = Новый Файл(ФайлИнформации());
	Если Файл.Существует() Тогда
		Попытка
			Чтение = Новый ЧтениеТекста(Файл.ПолноеИмя);
		Исключение
			Лог.Предупреждение("Не удалось прочитать файл информации %1.
			|" + ОписаниеОшибки(), Файл.ПолноеИмя);
			
			Возврат "";
		КонецПопытки;
		
		Текст = Чтение.Прочитать();
		Чтение.Закрыть();

		Лог.Отладка("Это внешний файл информации: " + мФайлИнформацииВнешний );
		Лог.Отладка("Очищать файл информации: " + мОчищатьФайлИнформации );

		Если Не мФайлИнформацииВнешний
			И мОчищатьФайлИнформации Тогда
			УдалитьФайлИнформации();
		КонецЕсли;

	Иначе
		Текст = "Информации об ошибке нет";
	КонецЕсли;

	Лог.Отладка("файл информации:
	|"+Текст);
	Возврат Текст;
КонецФункции

Функция УдалитьФайлИнформации()
	
	Файл = Новый Файл(ФайлИнформации());
	Если Файл.Существует() Тогда
		Попытка
			Лог.Отладка("Удаляю файл информации 1С");
			УдалитьФайлы(Файл.ПолноеИмя);
		Исключение
			Лог.Предупреждение("Не удалось удалить файл информации: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьВывод(Знач Сообщение)
	Если мОчищатьФайлИнформации
		ИЛИ Не ЗначениеЗаполнено( мТекстФайлаДоВывода ) Тогда
		мВыводКоманды = Сообщение;
	Иначе
		мВыводКоманды = СокрЛП( СтрЗаменить( Сообщение, мТекстФайлаДоВывода, "" ));
		Лог.Отладка("Вывод при дописываемом файле: " + мВыводКоманды);
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьТекстФайлаИнформации()

	Если мОчищатьФайлИнформации Тогда
		мТекстФайлаДоВывода = "";
	Иначе
		мТекстФайлаДоВывода = ПрочитатьФайлИнформации();
	КонецЕсли;

КонецПроцедуры

Функция ФайлИнформации() Экспорт

	Если мФайлИнформацииВнешний Тогда
		Возврат мИмяФайлаИнформации;
	КонецЕсли;

	Если мИмяФайлаИнформации = Неопределено Тогда
		выделенныйВременныйФайл = ПолучитьИмяВременногоФайла("txt");
		указательНаВременныйФайл = Новый Файл(выделенныйВременныйФайл);
		мИмяФайлаИнформации = указательНаВременныйФайл.Имя;
		указательНаВременныйФайл = "";
	КонецЕсли;

	Возврат ОбъединитьПути(КаталогСборки(), мИмяФайлаИнформации);
КонецФункции

Процедура ОбеспечитьКаталог(Знач Каталог)

	Файл = Новый Файл(Каталог);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Каталог);
	ИначеЕсли Не Файл.ЭтоКаталог() Тогда
		ВызватьИсключение "Каталог " + Каталог + " не является каталогом";
	КонецЕсли;

КонецПроцедуры

Функция РазложитьСтрокуВМассивПодстрок(ИсходнаяСтрока, Разделитель)

	МассивПодстрок = Новый Массив;
	ОстатокСтроки = ИсходнаяСтрока;

	Поз = -1;
	Пока Поз <> 0 Цикл

		Поз = Найти(ОстатокСтроки, Разделитель);
		Если Поз > 0 Тогда
			Подстрока = Лев(ОстатокСтроки, Поз-1);
			ОстатокСтроки = Сред(ОстатокСтроки, Поз+1);
		Иначе
			Подстрока = ОстатокСтроки;
		КонецЕсли;

		МассивПодстрок.Добавить(Подстрока);

	КонецЦикла;

	Возврат МассивПодстрок;

КонецФункции

Функция ОбернутьВКавычки(Знач Строка);
	Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;
КонецФункции

Процедура Инициализация()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;

	мВерсияПлатформы = "";

	мКонтекстКоманды = Новый Структура;
	мКонтекстКоманды.Вставить("Сервер", "localhost");
	мКонтекстКоманды.Вставить("Порт", "1545");


	ПутьКПлатформе1С(ПолучитьПутьКВерсииПлатформы("8.3"));

	мОчищатьФайлИнформации = Истина;
	мФайлИнформацииВнешний = Ложь;
	мПризнакОжиданияВыполненияПрограммы = Истина;
	мИсключениеПриОшибкеВыполненияКоманды = Истина;

КонецПроцедуры

Функция СкопироватьСтруктуру(Знач Источник)

	Копия = Новый Структура;
	Для Каждого КлючИЗначение Из Источник Цикл
		Копия.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;

	Возврат Копия;

КонецФункции

// Функция проверяет версию текущей платформы по сравнению с требуемой 
//
Функция ИспользуемаяВерсияПлатформыСтаршеИлиРавна(Знач ТребуемаяВерсияПлатформы)
	
	Лог.Отладка(СтрШаблон("Сравниваю версию <%1> с эталоном <%2>", мВерсияПлатформы, ТребуемаяВерсияПлатформы));

	РезультатСравнения = СтроковыеФункции.СравнитьВерсии(мВерсияПлатформы, ТребуемаяВерсияПлатформы);

	Возврат РезультатСравнения >= 0;

КонецФункции


//////////////////////////////////////////////////////////////////////////////////////
// Инициализация

Лог = Логирование.ПолучитьЛог("ktb.lib.irac");

Инициализация();

ПолучитьСписокБаз();