// Класс хранящий массив параметров команд объекта указанного типа
// Доступны типы:
//		cluster			- Кластер
//		admin			- Администратор (агента / кластера)
//		lock			- Блокировка
//		infobase		- ИнформационнаяБаза
//		manager			- МенеджерКластера
//		process			- РабочийПроцесс
//		server			- Сервер
//		service			- Сервис
//		session			- Сеанс
//		connection		- Соединение
//		process-license	- ЛицензияПроцесса
//		session-license	- ЛицензияСеанса
//		rule			- ТребованиеНазначения
//		profile			- ПрофильБезопасности

Перем Параметры;
Перем ПараметрыКоманды;

Перем Лог;

// Конструктор
//   
// Параметры:
//   ИмяТипаОбъекта			- Строка	- имя типа объекта для которого создается структура параметров
//
Процедура ПриСозданииОбъекта(ИмяТипаОбъекта, ИмяКоманды, ЗначенияПараметровКоманды)

	ПроцедурыЗаполнения = Новый Соответствие();
	ПроцедурыЗаполнения.Вставить(ВРег("cluster")                 , "ЗаполнитьПараметрыКластера");
	ПроцедурыЗаполнения.Вставить(ВРег("Кластер")                 , "ЗаполнитьПараметрыКластера");
	ПроцедурыЗаполнения.Вставить(ВРег("admin")                   , "ЗаполнитьПараметрыАдминистратора");
	ПроцедурыЗаполнения.Вставить(ВРег("Администратор")           , "ЗаполнитьПараметрыАдминистратора");
	ПроцедурыЗаполнения.Вставить(ВРег("lock")                    , "ЗаполнитьПараметрыБлокировки");
	ПроцедурыЗаполнения.Вставить(ВРег("Блокировка")              , "ЗаполнитьПараметрыБлокировки");
	ПроцедурыЗаполнения.Вставить(ВРег("infobase")                , "ЗаполнитьПараметрыИнформационнойБазы");
	ПроцедурыЗаполнения.Вставить(ВРег("ИнформационнаяБаза")      , "ЗаполнитьПараметрыИнформационнойБазы");
	ПроцедурыЗаполнения.Вставить(ВРег("manager")                 , "ЗаполнитьПараметрыМенеджераКластера");
	ПроцедурыЗаполнения.Вставить(ВРег("МенеджерКластера")        , "ЗаполнитьПараметрыМенеджераКластера");
	ПроцедурыЗаполнения.Вставить(ВРег("process")                 , "ЗаполнитьПараметрыРабочегоПроцесса");
	ПроцедурыЗаполнения.Вставить(ВРег("РабочийПроцесс")          , "ЗаполнитьПараметрыРабочегоПроцесса");
	ПроцедурыЗаполнения.Вставить(ВРег("server")                  , "ЗаполнитьПараметрыСервера");
	ПроцедурыЗаполнения.Вставить(ВРег("Сервер")                  , "ЗаполнитьПараметрыСервера");
	ПроцедурыЗаполнения.Вставить(ВРег("service")                 , "ЗаполнитьПараметрыСервиса");
	ПроцедурыЗаполнения.Вставить(ВРег("Сервис")                  , "ЗаполнитьПараметрыСервиса");
	ПроцедурыЗаполнения.Вставить(ВРег("session")                 , "ЗаполнитьПараметрыСеанса");
	ПроцедурыЗаполнения.Вставить(ВРег("Сеанс")                   , "ЗаполнитьПараметрыСеанса");
	ПроцедурыЗаполнения.Вставить(ВРег("connection")              , "ЗаполнитьПараметрыСоединения");
	ПроцедурыЗаполнения.Вставить(ВРег("Соединение")              , "ЗаполнитьПараметрыСоединения");
	ПроцедурыЗаполнения.Вставить(ВРег("process-license")         , "ЗаполнитьПараметрыЛицензииПроцесса");
	ПроцедурыЗаполнения.Вставить(ВРег("ЛицензияПроцесса")        , "ЗаполнитьПараметрыЛицензииПроцесса");
	ПроцедурыЗаполнения.Вставить(ВРег("session-license")         , "ЗаполнитьПараметрыЛицензииСеанса");
	ПроцедурыЗаполнения.Вставить(ВРег("ЛицензияСеанса")          , "ЗаполнитьПараметрыЛицензииСеанса");
	ПроцедурыЗаполнения.Вставить(ВРег("rule")                    , "ЗаполнитьПараметрыТребованияНазначения");
	ПроцедурыЗаполнения.Вставить(ВРег("ТребованиеНазначения")    , "ЗаполнитьПараметрыТребованияНазначения");
	ПроцедурыЗаполнения.Вставить(ВРег("profile")                 , "ЗаполнитьПараметрыПрофиляБезопасности");
	ПроцедурыЗаполнения.Вставить(ВРег("Профиль")                 , "ЗаполнитьПараметрыПрофиляБезопасности");
	ПроцедурыЗаполнения.Вставить(ВРег("profile.directory")       , "ЗаполнитьПараметрыКаталогаПрофиля");
	ПроцедурыЗаполнения.Вставить(ВРег("Профиль.Каталог")         , "ЗаполнитьПараметрыКаталогаПрофиля");
	ПроцедурыЗаполнения.Вставить(ВРег("profile.com")             , "ЗаполнитьПараметрыCOMКлассаПрофиля");
	ПроцедурыЗаполнения.Вставить(ВРег("Профиль.COMКласс")        , "ЗаполнитьПараметрыCOMКлассаПрофиля");
	ПроцедурыЗаполнения.Вставить(ВРег("profile.addin")           , "ЗаполнитьПараметрыКомпонентыМодуляПрофиля");
	ПроцедурыЗаполнения.Вставить(ВРег("Профиль.Компонент")       , "ЗаполнитьПараметрыКомпонентыМодуляПрофиля");
	ПроцедурыЗаполнения.Вставить(ВРег("profile.module")          , "ЗаполнитьПараметрыКомпонентыМодуляПрофиля");
	ПроцедурыЗаполнения.Вставить(ВРег("Профиль.Модуль")          , "ЗаполнитьПараметрыКомпонентыМодуляПрофиля");
	ПроцедурыЗаполнения.Вставить(ВРег("profile.app")             , "ЗаполнитьПараметрыПриложенияПрофиля");
	ПроцедурыЗаполнения.Вставить(ВРег("Профиль.Приложение")      , "ЗаполнитьПараметрыПриложенияПрофиля");
	ПроцедурыЗаполнения.Вставить(ВРег("profile.inet")            , "ЗаполнитьПараметрыИнтернетРесурсаПрофиля");
	ПроцедурыЗаполнения.Вставить(ВРег("Профиль.ИнтернетРесурс")  , "ЗаполнитьПараметрыИнтернетРесурсаПрофиля");

	ПроцедураЗаполнения = ПроцедурыЗаполнения[ВРег(ИмяТипаОбъекта)];

	ПараметрыКоманды = Новый Соответствие();
	Если ТипЗнч(ЗначенияПараметровКоманды) = Тип("Соответствие") Тогда
		ПараметрыКоманды = ЗначенияПараметровКоманды;
	КонецЕсли;

	Если НЕ ПроцедураЗаполнения = Неопределено Тогда
		Рефлектор = Новый Рефлектор();
		ПараметрыПроцедурыЗаполнения = Новый Массив();
		ПараметрыПроцедурыЗаполнения.Добавить(ИмяКоманды);
		Рефлектор.ВызватьМетод(ЭтотОбъект, ПроцедураЗаполнения, ПараметрыПроцедурыЗаполнения);
	КонецЕсли;

КонецПроцедуры // ПриСозданииОбъекта()

// Функция возвращает коллекцию параметров объекта
//   
// Параметры:
//   ИмяПоляКлюча 		- Строка	- имя поля, значение которого будет использовано
//									  в качестве ключа возвращаемого соответствия
//   
// Возвращаемое значение:
//	Соответствие - коллекция параметров объекта, для получения/изменения значений
//
Функция Получить() Экспорт
	
	Возврат Параметры;

КонецФункции // Получить()

Процедура ДобавитьПараметрСтроку(Знач Параметр, Обязательный = Ложь, ДобавлятьПустой = Истина)

	Если НЕ ТипЗнч(Параметры) = Тип("Массив") Тогда
		Параметры = Новый Массив();
	КонецЕсли;
	
	Если НЕ ТипЗнч(Параметр) = Тип("Строка") Тогда
		Параметр = "";
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Параметр) И Обязательный Тогда
		ВызватьИсключение "Не заполнен обязательный параметр!";
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметр) ИЛИ ДобавлятьПустой Тогда
		Параметры.Добавить(Параметр);
	КонецЕсли;

КонецПроцедуры // ДобавитьПараметрСтроку()

Процедура ДобавитьПараметрПоИмени(Знач ИмяПараметра, Обязательный = Ложь, ДобавлятьПустой = Истина)

	Если НЕ ТипЗнч(Параметры) = Тип("Массив") Тогда
		Параметры = Новый Массив();
	КонецЕсли;
	
	Параметр = ПараметрыКоманды.Получить(ИмяПараметра);
	Если Параметр = Неопределено Тогда
		Параметр = "";
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Параметр) И Обязательный Тогда
		ВызватьИсключение СтрШаблон("Не заполнен обязательный параметр %1!", ИмяПараметра);
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметр) ИЛИ ДобавлятьПустой Тогда
		Параметры.Добавить(Параметр);
	КонецЕсли;

КонецПроцедуры // ДобавитьПараметрПоИмени()

Процедура ДобавитьПараметрПоШаблону(Знач ШаблонПараметра, Знач ИмяПараметра)

	Если НЕ ТипЗнч(Параметры) = Тип("Массив") Тогда
		Параметры = Новый Массив();
	КонецЕсли;
	
	ЗначениеПараметра = ПараметрыКоманды.Получить(ИмяПараметра);

	Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		ВызватьИсключение СтрШаблон("Не заполнен обязательный параметр %1!", ИмяПараметра);
	КонецЕсли;

	Параметры.Добавить(СтрШаблон(ШаблонПараметра, ЗначениеПараметра));

КонецПроцедуры // ДобавитьПараметрПоШаблону()

Функция ЗначениеФлага(Знач ИмяПараметра)

	Параметр = ПараметрыКоманды.Получить(ИмяПараметра);
	Если Параметр = Неопределено Тогда
		Параметр = Ложь;
	КонецЕсли;

	Возврат Параметр;

КонецФункции // ДобавитьПараметрПоИмени()

// Процедура заполняет параметры команд информационной базы
//
Процедура ЗаполнитьПараметрыИнформационнойБазы(ИмяКоманды) Экспорт

	Параметры = Новый Массив();

	ДобавитьПараметрПоИмени("СтрокаПодключенияАгента");

	ДобавитьПараметрСтроку("infobase");

	ДобавитьПараметрПоШаблону("--cluster=%1", "ИдентификаторКластера");
	ДобавитьПараметрПоИмени("СтрокаАвторизацииКластера");

	Если ВРег(ИмяКоманды) = ВРег("Список") ИЛИ ВРег(ИмяКоманды) = ВРег("list") Тогда
		ДобавитьПараметрСтроку("summary");
		ДобавитьПараметрСтроку("list");
	ИначеЕсли ВРег(ИмяКоманды) = ВРег("Описание") ИЛИ ВРег(ИмяКоманды) = ВРег("summary") Тогда
		ДобавитьПараметрСтроку("summary");
		ДобавитьПараметрСтроку("info");
		ДобавитьПараметрПоШаблону("--infobase=%1", "ИдентификаторИБ");
	ИначеЕсли ВРег(ИмяКоманды) = ВРег("ПолноеОписание") ИЛИ ВРег(ИмяКоманды) = ВРег("info") Тогда
		ДобавитьПараметрСтроку("info");
		ДобавитьПараметрПоШаблону("--infobase=%1", "ИдентификаторИБ");
		ДобавитьПараметрПоИмени("СтрокаАвторизацииИБ");
	ИначеЕсли ВРег(ИмяКоманды) = ВРег("Добавить") ИЛИ ВРег(ИмяКоманды) = ВРег("create") Тогда
		ДобавитьПараметрСтроку("create");
	
		ДобавитьПараметрПоШаблону("--name=%1"  , "Имя");
		ДобавитьПараметрПоШаблону("--locale=%1", "Локализация");
		
		Если ЗначениеФлага("СоздатьБазуСУБД") Тогда
			ДобавитьПараметрСтроку("--create-database");
		КонецЕсли;
	
		ПараметрыОбъекта = Новый ПараметрыОбъекта("infobase");
		ВсеПараметры = ПараметрыОбъекта.Получить();

		Для Каждого ТекЭлемент Из ВсеПараметры Цикл
			Если НЕ ТекЭлемент.Значение.Добавление Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ПараметрыКоманды.Получить(ТекЭлемент.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьПараметрПоШаблону(ТекЭлемент.Значение.ПараметрКоманды + "=%1", ТекЭлемент.Ключ);
		КонецЦикла;
	
	ИначеЕсли ВРег(ИмяКоманды) = ВРег("Удалить") ИЛИ ВРег(ИмяКоманды) = ВРег("drop") Тогда
	
		ДобавитьПараметрСтроку("drop");

		ДобавитьПараметрПоШаблону("--infobase=%1", "ИдентификаторИБ");
		ДобавитьПараметрПоИмени("СтрокаАвторизацииИБ");
	
		Если ПараметрыКоманды.Получить("ДействияСБазойСУБД") = "drop" Тогда
			ДобавитьПараметрСтроку("--drop-database");
		ИначеЕсли ПараметрыКоманды.Получить("ДействияСБазойСУБД") = "clear" Тогда
			ДобавитьПараметрСтроку("--clear-database");
		КонецЕсли;
	
	ИначеЕсли ВРег(ИмяКоманды) = ВРег("Изменить") ИЛИ ВРег(ИмяКоманды) = ВРег("update") Тогда
		
		ДобавитьПараметрСтроку("update");

		ДобавитьПараметрПоШаблону("--infobase=%1", "ИдентификаторИБ");
		ДобавитьПараметрПоИмени("СтрокаАвторизацииИБ");
	
		ПараметрыОбъекта = Новый ПараметрыОбъекта("infobase");
		ВсеПараметры = ПараметрыОбъекта.Получить();

		Для Каждого ТекЭлемент Из ВсеПараметры Цикл
			Если НЕ ТекЭлемент.Значение.Добавление Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ПараметрыКоманды.Получить(ТекЭлемент.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьПараметрПоШаблону(ТекЭлемент.Значение.ПараметрКоманды + "=%1", ТекЭлемент.Ключ);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьПараметрыИнформационнойБазы()

Лог = Логирование.ПолучитьЛог("ktb.lib.irac");
