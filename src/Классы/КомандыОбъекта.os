// Класс хранящий структуру свойств и команд объекта указанного типа
// Доступны типы:
//		agent.admin		- Агент.Администратор
//		cluster			- Кластер
//		cluster.admin	- Кластер.Администратор
//		lock			- Блокировка
//		infobase		- ИБ
//		manager			- МенеджерКластера
//		process			- РабочийПроцесс
//		server			- Сервер
//		service			- Сервис
//		session			- Сеанс
//		connection		- Соединение
//		process.license	- РабочийПроцесс.Лицензия
//		session.license	- Сеанс.Лицензия
//		rule			- ТребованиеНазначения
//		profile			- Профиль
//		profile.directory	- Профиль.Каталог
//		profile.com			- Профиль.COMКласс
//		profile.addin		- Профиль.Компонент
//		profile.module		- Профиль.Модуль
//		profile.app			- Профиль.Приложение
//		profile.inet		- Профиль.ИнтернетРесурс

Перем ТипОбъекта; // наименование типа объектов (Кластер, Сервер, ИБ и т.п.)
Перем ОписаниеСвойств; // структура описания свойств объектов
Перем ПолучениеПараметровОбъектов; // структура описания методов заполнения списка свойств и команд объекта
Перем ПараметрыЗапуска; // массив параметров запуска команды утилиты RAC
Перем ЗначенияПараметров; // значения именованых параметров объекта

Перем Лог;

#Область ПрограммныйИнтерфейс

// Конструктор
//   
// Параметры:
//   ИмяТипаОбъекта                 - Строка        - имя типа объекта для которого создается структура параметров
//   ЗначенияПараметровКоманд       - Структура     - список параметров команд:
//                                                       Ключ - имя параметра
//                                                       Значение - значение параметра
//
Процедура ПриСозданииОбъекта(ИмяТипаОбъекта, ЗначенияПараметровКоманд = Неопределено)

	ЗаполнитьПолучениеПараметровОбъекта();

	ТипОбъекта = ПолучениеПараметровОбъектов[ВРег(ИмяТипаОбъекта)]["ИмяТипа"];

	ПроцедураЗаполнения = ПолучениеПараметровОбъектов[ВРег(ТипОбъекта)]["Параметры"];

	Если НЕ ПроцедураЗаполнения = Неопределено Тогда
		Рефлектор = Новый Рефлектор();
		Рефлектор.ВызватьМетод(ЭтотОбъект, ПроцедураЗаполнения, Новый Массив());
	КонецЕсли;

	УстановитьЗначенияПараметровКоманд(ЗначенияПараметровКоманд);

КонецПроцедуры // ПриСозданииОбъекта()

// Процедура устанавливает значения параметров команд
//   
// Параметры:
//   ЗначенияПараметровКоманд       - Структура     - список параметров команд:
//                                                       Ключ - имя параметра
//                                                       Значение - значение параметра
//   Очистить                       - Булево        - Истина - очистить значения параметров перед заполнением
//                                                    Ложь - добавить параметры к существующим
//                                                          (одноименные будут перезаполнены)
//
Процедура УстановитьЗначенияПараметровКоманд(Знач ЗначенияПараметровКоманд, Знач Очистить = Ложь) Экспорт

	Если НЕ ТипЗнч(ЗначенияПараметров) = Тип("Соответствие") ИЛИ Очистить Тогда
		ЗначенияПараметров = Новый Соответствие();
	КонецЕсли;

	Если ТипЗнч(ЗначенияПараметровКоманд) = Тип("Соответствие") Тогда
		Для Каждого ТекЭлемент Из ЗначенияПараметровКоманд Цикл
			ЗначенияПараметров.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЗначенияПараметровКоманд()

// Функция возвращает коллекцию описаний свойств объекта
//   
// Параметры:
//   ИмяПоляКлюча 		- Строка	- имя поля, значение которого будет использовано
//									  в качестве ключа возвращаемого соответствия
//   
// Возвращаемое значение:
//	Соответствие - коллекция описаний свойств объекта, для получения/изменения значений
//
Функция ОписаниеСвойств(Знач ИмяПоляКлюча = "ИмяПараметра") Экспорт
	
	СтруктураОписаний = Новый Соответствие();

	Если НЕ ТипЗнч(ОписаниеСвойств) = Тип("Массив") Тогда
		Возврат СтруктураОписаний;
	КонецЕсли;

	Для Каждого ТекОписание Из ОписаниеСвойств Цикл
		СтруктураОписаний.Вставить(ТекОписание[ИмяПоляКлюча], ТекОписание);
	КонецЦикла;

	Возврат СтруктураОписаний;

КонецФункции // ОписаниеСвойств()

// Функция выполняет заполнение массива параметров запуска команды
// и возвращает результирующий массив
//   
// Параметры:
//   ИмяКоманды 		- Строка	- имя команды для которой выпоняется заполнение
//   
// Возвращаемое значение:
//	Массив - параметры запуска команды
//
Функция ПараметрыКоманды(Знач ИмяКоманды) Экспорт
	
	ПроцедураЗаполнения = ПолучениеПараметровОбъектов[ВРег(ТипОбъекта)]["Команды"][ВРег(ИмяКоманды)]["Параметры"];

	Если НЕ ПроцедураЗаполнения = Неопределено Тогда
		Рефлектор = Новый Рефлектор();
		Попытка
			Рефлектор.ВызватьМетод(ЭтотОбъект, ПроцедураЗаполнения, Новый Массив());
		Исключение
			ВызватьИсключение
				СтрШаблон("Ошибка вызова метода получения параметров команды ""%1"" объекта ""%2"" (%3()): %4 %5",
						  ИмяКоманды,
						  ТипОбъекта,
						  ПроцедураЗаполнения,
						  Символы.ПС,
						  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

	Возврат ПараметрыЗапуска;

КонецФункции // ПараметрыКоманды()

#КонецОбласти // ПрограммныйИнтерфейс

#Область ПроцедурыЗаполненияПараметровОбъектов

#Область Кластеры

// Процедура заполняет массив описаний параметров кластера
//
Процедура Параметры_Кластер_Свойства() Экспорт

	ДобавитьОписаниеСвойстваОбъекта("Ид"                                         , "cluster");
	ДобавитьОписаниеСвойстваОбъекта("АдресСервера"                               , "host");
	ДобавитьОписаниеСвойстваОбъекта("ПортСервера"                                , "port");
	ДобавитьОписаниеСвойстваОбъекта("Имя"                                        , "name");
	ДобавитьОписаниеСвойстваОбъекта("ИнтервалПерезапуска"                        , "lifetime-limit"               , 0,
									"Чтение, Добавление, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("ДопустимыйОбъемПамяти"                      , "max-memory-size"              , 0,
									"Чтение, Добавление, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("ЗащищенноеСоединение"                       , "security-level"               , 0,
									"Чтение, Добавление, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("УровеньОтказоустойчивости"                  , "session-fault-tolerance-level", 0,
									"Чтение, Добавление, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("РежимРаспределенияНагрузки"                 , "load-balancing-mode", 
									Перечисления.РежимыРаспределенияНагрузки.ПоПроизводительности,
									"Чтение, Добавление, Изменение");

	ДобавитьОписаниеСвойстваОбъекта("ИнтервалПревышенияДопустимогоОбъемаПамяти"  , "max-memory-time-limit"        , 0,
									"Чтение, Добавление, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("ДопустимоеОтклонениеКоличестваОшибокСервера", "errors-count-threshold"       , 0,
									"Чтение, Добавление, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("ПринудительноЗавершатьПроблемныеПроцессы"   , "kill-problem-processes",
									Перечисления.ДаНет.Нет,
									"Чтение, Добавление, Изменение");

	ДобавитьОписаниеСвойстваОбъекта("ВыключенныеПроцессыОстанавливатьЧерез"      , "expiration-timeout"           , 0,
	                                "Чтение, Добавление, Изменение");

КонецПроцедуры // Параметры_Кластер_Свойства()

// Процедура заполняет общие параметры запуска команд кластеров
//
Процедура Параметры_Кластер_Общие()

	ПараметрыЗапуска = Новый Массив();

	ДобавитьПараметрПоИмени("СтрокаПодключенияАгента");

	ДобавитьПараметрСтроку("cluster");

КонецПроцедуры // Параметры_Кластер_Общие()

// Процедура заполняет параметры запуска команды получения списка кластеров
//
Процедура Параметры_Кластер_Список() Экспорт

	Параметры_Кластер_Общие();

	ДобавитьПараметрСтроку("list");

КонецПроцедуры // Параметры_Кластер_Список()

// Процедура заполняет параметры запуска команды получения описания кластера
//
Процедура Параметры_Кластер_Описание() Экспорт

	Параметры_Кластер_Общие();

	ДобавитьПараметрСтроку("info");
	ДобавитьПараметрПоШаблону("--cluster=%1", "ИдентификаторКластера");

КонецПроцедуры // Параметры_Кластер_Описание()

// Процедура заполняет параметры запуска команды добавления кластера
//
Процедура Параметры_Кластер_Добавить() Экспорт

	Параметры_Кластер_Общие();

	ДобавитьПараметрСтроку("insert");
	
	ДобавитьПараметрПоИмени("СтрокаАвторизацииАгента");

	ДобавитьПараметрПоШаблону("--host=%1", "АдресСервера");
	ДобавитьПараметрПоШаблону("--port=%1", "ПортСервера");
	ДобавитьПараметрПоШаблону("--name=%1", "Имя");

	ДобавитьПрочиеПараметрыКоманды("Добавление");

КонецПроцедуры // Параметры_Кластер_Добавить()

// Процедура заполняет параметры запуска команды изменения кластера
//
Процедура Параметры_Кластер_Изменить() Экспорт

	Параметры_Кластер_Общие();

	ДобавитьПараметрСтроку("update");

	ДобавитьПараметрПоИмени("СтрокаАвторизацииАгента");

	ДобавитьПараметрПоШаблону("--cluster=%1", "ИдентификаторКластера");

	Если НЕ ЗначенияПараметров.Получить("Имя") = Неопределено Тогда
		ДобавитьПараметрПоШаблону("--name=%1", "Имя");
	КонецЕсли;
	
	ДобавитьПрочиеПараметрыКоманды("Изменение");

КонецПроцедуры // Параметры_Кластер_Изменить()

// Процедура заполняет параметры запуска команды удаления кластера
//
Процедура Параметры_Кластер_Удалить() Экспорт

	Параметры_Кластер_Общие();

	ДобавитьПараметрСтроку("remove");

	ДобавитьПараметрПоШаблону("--cluster=%1", "ИдентификаторКластера");

	ДобавитьПараметрПоИмени("СтрокаАвторизацииКластера");

КонецПроцедуры // Параметры_Кластер_Удалить()

#КонецОбласти // Кластеры

#Область Администраторы_Общее

// Процедура заполняет массив описаний параметров администратора (агента / кластера)
//
Процедура Параметры_Администратор_Свойства() Экспорт

	ДобавитьОписаниеСвойстваОбъекта("Имя"				, "name"	, "Администратор",
									"Чтение, Добавление");
									
	ДобавитьОписаниеСвойстваОбъекта("Пароль"			, "pwd"		, "***",
									"Добавление");
									
	ДобавитьОписаниеСвойстваОбъекта("СпособАвторизации"	, "auth"	, Перечисления.СпособыАвторизации.Пароль,
									"Чтение, Добавление");
									
	ДобавитьОписаниеСвойстваОбъекта("ПользовательОС"	, "os-user"	, "",
									"Чтение, Добавление");
									
	ДобавитьОписаниеСвойстваОбъекта("Описание"			, "descr"	, "",
	                                "Чтение, Добавление");

КонецПроцедуры // Параметры_Администратор_Свойства()

#КонецОбласти // Администраторы_Общее

#Область АдминистраторыАгента

// Процедура заполняет массив описаний параметров администратора агента
//
Процедура Параметры_Агент_Администратор_Свойства() Экспорт

	Параметры_Администратор_Свойства();

КонецПроцедуры // Параметры_Агент_Администратор_Свойства()

// Процедура заполняет общие параметры запуска команд администраторов агента
//
Процедура Параметры_Агент_Администратор_Общие() Экспорт

	ПараметрыЗапуска = Новый Массив();

	ДобавитьПараметрПоИмени("СтрокаПодключенияАгента");

	ДобавитьПараметрСтроку("agent");

	ДобавитьПараметрПоИмени("СтрокаАвторизацииАгента");
	
	ДобавитьПараметрСтроку("admin");

КонецПроцедуры // Параметры_Агент_Администратор_Общие()

// Процедура заполняет параметры запуска команды получения списка администраторов агента
//
Процедура Параметры_Агент_Администратор_Список() Экспорт

	Параметры_Агент_Администратор_Общие();

	ДобавитьПараметрСтроку("list");

КонецПроцедуры // Параметры_Агент_Администратор_Список()

// Процедура заполняет параметры запуска команды добавления администратора агента
//
Процедура Параметры_Агент_Администратор_Добавить() Экспорт

	Параметры_Агент_Администратор_Общие();

	ДобавитьПараметрСтроку("register");

	ДобавитьПараметрСтроку(СтрШаблон("--name=%1", Служебный.ОбернутьВКавычки(ЗначенияПараметров.Получить("Имя"))));

	ДобавитьПрочиеПараметрыКоманды("Добавление", , "Имя");

КонецПроцедуры // Параметры_Агент_Администратор_Добавить()

// Процедура заполняет параметры запуска команды удаления администратора агента
//
Процедура Параметры_Агент_Администратор_Удалить() Экспорт

	Параметры_Агент_Администратор_Общие();

	ДобавитьПараметрСтроку("remove");

	ДобавитьПараметрСтроку(СтрШаблон("--name=%1", Служебный.ОбернутьВКавычки(ЗначенияПараметров.Получить("Имя"))));
	
КонецПроцедуры // Параметры_Агент_Администратор_Удалить()

#КонецОбласти // АдминистраторыАгента

#Область АдминистраторыКластера

// Процедура заполняет массив описаний параметров администратора кластера
//
Процедура Параметры_Кластер_Администратор_Свойства() Экспорт

	Параметры_Администратор_Свойства();

КонецПроцедуры // Параметры_Кластер_Администратор_Свойства()

// Процедура заполняет общие параметры запуска команд администраторов кластера
//
Процедура Параметры_Кластер_Администратор_Общие() Экспорт

	ПараметрыЗапуска = Новый Массив();

	ДобавитьПараметрПоИмени("СтрокаПодключенияАгента");

	ДобавитьПараметрСтроку("cluster");

	ДобавитьПараметрСтроку("admin");

	ДобавитьПараметрПоШаблону("--cluster=%1", "ИдентификаторКластера");
	
	ДобавитьПараметрПоИмени("СтрокаАвторизацииКластера");

КонецПроцедуры // Параметры_Кластер_Администратор_Общие()

// Процедура заполняет параметры запуска команды получения списка администраторов кластера
//
Процедура Параметры_Кластер_Администратор_Список() Экспорт

	Параметры_Кластер_Администратор_Общие();

	ДобавитьПараметрСтроку("list");

КонецПроцедуры // Параметры_Кластер_Администратор_Список()

// Процедура заполняет параметры запуска команды добавления администратора кластера
//
Процедура Параметры_Кластер_Администратор_Добавить() Экспорт

	Параметры_Кластер_Администратор_Общие();

	ДобавитьПараметрСтроку("register");

	ДобавитьПараметрСтроку(СтрШаблон("--name=%1", Служебный.ОбернутьВКавычки(ЗначенияПараметров.Получить("Имя"))));

	ДобавитьПрочиеПараметрыКоманды("Добавление", , "Имя");

	ДобавитьПараметрПоИмени("СтрокаАвторизацииАгента");

КонецПроцедуры // Параметры_Кластер_Администратор_Добавить()

// Процедура заполняет параметры запуска команды удаления администратора кластера
//
Процедура Параметры_Кластер_Администратор_Удалить() Экспорт

	Параметры_Кластер_Администратор_Общие();

	ДобавитьПараметрСтроку("remove");

	ДобавитьПараметрСтроку(СтрШаблон("--name=%1", Служебный.ОбернутьВКавычки(ЗначенияПараметров.Получить("Имя"))));
	
КонецПроцедуры // Параметры_Кластер_Администратор_Удалить()

#КонецОбласти // АдминистраторыКластера

#Область МенеджерыКластера

// Процедура заполняет массив описаний параметров менеджера кластера
//
Процедура Параметры_МенеджерКластера_Свойства() Экспорт

	ДобавитьОписаниеСвойстваОбъекта("Ид"			, "manager");
	ДобавитьОписаниеСвойстваОбъекта("ИдПроцессаОС"	, "pid");
	ДобавитьОписаниеСвойстваОбъекта("Назначение"	, "using");
	ДобавитьОписаниеСвойстваОбъекта("АдресСервера"	, "host");
	ДобавитьОписаниеСвойстваОбъекта("ПортСервера"	, "port");
	ДобавитьОписаниеСвойстваОбъекта("Описание"		, "descr");

КонецПроцедуры // Параметры_МенеджерКластера_Свойства()

// Процедура заполняет параметры запуска команды получения списка менеджеров кластера
//
Процедура Параметры_МенеджерКластера_Список() Экспорт

	ПараметрыЗапуска = Новый Массив();

	ДобавитьПараметрПоИмени("СтрокаПодключенияАгента");

	ДобавитьПараметрСтроку("manager");
	ДобавитьПараметрСтроку("list");

	ДобавитьПараметрПоШаблону("--cluster=%1", "ИдентификаторКластера");

	ДобавитьПараметрПоИмени("СтрокаАвторизацииКластера");

КонецПроцедуры // Параметры_МенеджерКластера_Список()

#КонецОбласти // МенеджерыКластера

#Область Серверы

// Процедура заполняет массив описаний параметров сервера
//
Процедура Параметры_Сервер_Свойства() Экспорт
	
	ДиапазонПортов = "1560:1591";
	КоличествоИБНаПроцесс = "8";
	КоличествоСоединенийНаПроцесс = "128";
	ПортГлавногоМенеджераКластера = "1541";
	ПортАгента = "1540";

	ДобавитьОписаниеСвойстваОбъекта("Ид"								, "server");
	ДобавитьОписаниеСвойстваОбъекта("Имя"								, "name"            , ,
	                                "Чтение, Добавление");
	ДобавитьОписаниеСвойстваОбъекта("АдресАгента"						, "agent-host"		, "localhost",
	                                "Чтение, Добавление");
	ДобавитьОписаниеСвойстваОбъекта("ПортАгента"						, "agent-port"		, ПортАгента,
	                                "Чтение, Добавление");
	ДобавитьОписаниеСвойстваОбъекта("ДиапазонПортов"					, "port-range"		, ДиапазонПортов,
	                                "Чтение, Добавление, Изменение");
	
	ДобавитьОписаниеСвойстваОбъекта("ЦентральныйСервер"					, "using"            ,
									Перечисления.ВариантыИспользованияРабочегоСервера.Главный,
									"Чтение, Добавление, Изменение");

	ДобавитьОписаниеСвойстваОбъекта("МенеджерПодКаждыйСервис"			, "dedicate-managers",
									Перечисления.ВариантыРазмещенияСервисов.ВОдномМенеджере,
									"Чтение, Добавление, Изменение");

	ДобавитьОписаниеСвойстваОбъекта("КоличествоИБНаПроцесс"				, "infobases-limit"  ,
									КоличествоИБНаПроцесс,
									"Чтение, Добавление, Изменение");

	ДобавитьОписаниеСвойстваОбъекта("МаксОбъемПамятиРабочихПроцессов"	, "memory-limit"     , "0",
	                                "Чтение, Добавление, Изменение");
	
	ДобавитьОписаниеСвойстваОбъекта("КоличествоСоединенийНаПроцесс"		, "connections-limit",
									КоличествоСоединенийНаПроцесс,
									"Чтение, Добавление, Изменение");

	ДобавитьОписаниеСвойстваОбъекта("ПортГлавногоМенеджераКластера"		, "cluster-port"     ,
									ПортГлавногоМенеджераКластера,
									"Чтение, Добавление");

	ДобавитьОписаниеСвойстваОбъекта("БезопасныйОбъемПамятиРабочихПроцессов", "safe-working-processes-memory-limit", "0",
									"Чтение, Добавление, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("БезопасныйРасходПамятиЗаОдинВызов"	, "safe-call-memory-limit"	, "0",
	                                "Чтение, Добавление, Изменение");

КонецПроцедуры // Параметры_Сервер_Свойства()

// Процедура заполняет общие параметры запуска команд серверов
//
Процедура Параметры_Сервер_Общие()

	ПараметрыЗапуска = Новый Массив();

	ДобавитьПараметрПоИмени("СтрокаПодключенияАгента");

	ДобавитьПараметрСтроку("server");

	ДобавитьПараметрПоШаблону("--cluster=%1", "ИдентификаторКластера");
	ДобавитьПараметрПоИмени("СтрокаАвторизацииКластера");

КонецПроцедуры // Параметры_Сервера_Общие()

// Процедура заполняет параметры команды получения списка серверов
//
Процедура Параметры_Сервер_Список() Экспорт

	Параметры_Сервер_Общие();

	ДобавитьПараметрСтроку("list");

КонецПроцедуры // Параметры_Сервер_Список()

// Процедура заполняет параметры команды получения описания сервера
//
Процедура Параметры_Сервер_Описание() Экспорт

	Параметры_Сервер_Общие();

	ДобавитьПараметрСтроку("info");
	ДобавитьПараметрПоШаблону("--server=%1", "ИдентификаторСервера");

КонецПроцедуры // Параметры_Сервер_Описание()

// Процедура заполняет параметры команды добавления сервера
//
Процедура Параметры_Сервер_Добавить() Экспорт

	Параметры_Сервер_Общие();

	ДобавитьПараметрСтроку("insert");
	
	ДобавитьПараметрПоШаблону("--name=%1"  , "Имя");
	ДобавитьПараметрПоШаблону("--locale=%1", "Локализация");
	
	ДобавитьПрочиеПараметрыКоманды("Добавление", , "Имя");

КонецПроцедуры // Параметры_Сервер_Добавить()

// Процедура заполняет параметры команды изменения сервера
//
Процедура Параметры_Сервер_Изменить() Экспорт

	Параметры_Сервер_Общие();

	ДобавитьПараметрСтроку("update");

	ДобавитьПараметрПоШаблону("--server=%1", "ИдентификаторСервера");

	ДобавитьПрочиеПараметрыКоманды("Изменение");

КонецПроцедуры // Параметры_Сервер_Изменить()

// Процедура заполняет параметры команды удаления сервера
//
Процедура Параметры_Сервер_Удалить() Экспорт

	Параметры_Сервер_Общие();

	ДобавитьПараметрСтроку("remove");

	ДобавитьПараметрПоШаблону("--server=%1", "ИдентификаторСервеа");

КонецПроцедуры // Параметры_Сервер_Удалить()

#КонецОбласти // Серверы

#Область РабочиеПроцессы

// Процедура заполняет массив описаний параметров рабочего процесса
//
Процедура Параметры_РабочийПроцесс_Свойства() Экспорт

    ДобавитьОписаниеСвойстваОбъекта("Ид"							, "process");
	ДобавитьОписаниеСвойстваОбъекта("АдресСервера"					, "host");
	ДобавитьОписаниеСвойстваОбъекта("ПортСервера"					, "port");
	ДобавитьОписаниеСвойстваОбъекта("ИдПроцессаОС"					, "pid");
	ДобавитьОписаниеСвойстваОбъекта("Активен"						, "is-enable");
	ДобавитьОписаниеСвойстваОбъекта("Выполняется"					, "running");
	ДобавитьОписаниеСвойстваОбъекта("ВремяЗапуска"					, "started-at");
	ДобавитьОписаниеСвойстваОбъекта("Использование"					, "use");
	ДобавитьОписаниеСвойстваОбъекта("ДоступнаяПроизводительность"	, "available-perfomance");
	ДобавитьОписаниеСвойстваОбъекта("Емкость"						, "capacity");
	ДобавитьОписаниеСвойстваОбъекта("КоличествоСоединений"			, "connections");
	ДобавитьОписаниеСвойстваОбъекта("ЗанятьПамяти"					, "memory-size");
	ДобавитьОписаниеСвойстваОбъекта("ВремяПревышенияЗанятойПамяти"	, " memory-excess-time");
	ДобавитьОписаниеСвойстваОбъекта("ОбъемВыборки"					, "selection-size");
	ДобавитьОписаниеСвойстваОбъекта("ЗатраченоКлиентом"				, "avg-back-call-time");
	ДобавитьОписаниеСвойстваОбъекта("ЗатраченоВсего"				, "avg-call-time");
	ДобавитьОписаниеСвойстваОбъекта("ЗатраченоСУБД"					, "avg-db-call-time");
	ДобавитьОписаниеСвойстваОбъекта("ЗатраченоМенеджеромБлокировок"	, "avg-lock-call-time");
	ДобавитьОписаниеСвойстваОбъекта("ЗатраченоСервером"				, "avg-server-call-time");
	ДобавитьОписаниеСвойстваОбъекта("КлиентскихПотоков"				, "avg-threads");

КонецПроцедуры // Параметры_РабочийПроцесс_Свойства()

// Процедура заполняет общие параметры запуска команд рабочих процессов
//
Процедура Параметры_РабочийПроцесс_Общие()

	ПараметрыЗапуска = Новый Массив();

	ДобавитьПараметрПоИмени("СтрокаПодключенияАгента");

	ДобавитьПараметрСтроку("process");

	ДобавитьПараметрПоШаблону("--cluster=%1", "ИдентификаторКластера");
	ДобавитьПараметрПоИмени("СтрокаАвторизацииКластера");

КонецПроцедуры // Параметры_РабочийПроцесс_Общие()

// Процедура заполняет параметры команды получения списка рабочих процессов
//
Процедура Параметры_РабочийПроцесс_Список() Экспорт

	Параметры_РабочийПроцесс_Общие();

	ДобавитьПараметрСтроку("list");

КонецПроцедуры // Параметры_РабочийПроцесс_Список()

// Процедура заполняет параметры команды получения описания рабочего процесса
//
Процедура Параметры_РабочийПроцесс_Описание() Экспорт

	Параметры_РабочийПроцесс_Общие();

	ДобавитьПараметрСтроку("info");
	ДобавитьПараметрПоШаблону("--process=%1", "ИдентификаторПроцесса");

КонецПроцедуры // Параметры_РабочийПроцесс_Описание()

#КонецОбласти // РабочиеПроцессы

#Область ИнформационныеБазы

// Процедура заполняет массив описаний свойств информационной базы
//
Процедура Параметры_ИБ_Свойства() Экспорт

	ДобавитьОписаниеСвойстваОбъекта("Ид"									, "infobase");
	ДобавитьОписаниеСвойстваОбъекта("ТипСУБД"								, "dbms",
									Перечисления.ТипыСУБД.MSSQLServer, "Чтение, Добавление, Изменение");

	ДобавитьОписаниеСвойстваОбъекта("АдресСервераСУБД"						, "db-server", "",
									"Чтение, Добавление, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("ИмяБазыСУБД"							, "db-name", ,
									"Чтение, Добавление, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("ИмяПользователяБазыСУБД"				, "db-user", ,
									"Чтение, Добавление, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("ПарольПользователяБазыСУБД"			, "db-pwd", ,
									"Добавление, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("НачалоБлокировкиСеансов"				, "denied-from", ,
									"Чтение, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("ОкончаниеБлокировкиСеансов"			, "denied-to", ,
									"Чтение, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("СообщениеБлокировкиСеансов"			, "denied-message", ,
									"Чтение, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("ПараметрБлокировкиСеансов"				, "denied-parameter", ,
									"Чтение, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("КодРазрешения"							, "permission-code", ,
									"Чтение, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("БлокировкаСеансовВключена"				, "sessions-deny", ,
									"Чтение, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("БлокировкаРегламентныхЗаданийВключена"	, "scheduled-jobs-deny",
									Перечисления.СостоянияВыключателя.Выключено,
									"Чтение, Добавление, Изменение");

	ДобавитьОписаниеСвойстваОбъекта("ВыдачаЛицензийСервером"				, "license-distribution",
									Перечисления.ПраваДоступа.Разрешено,
									"Чтение, Добавление, Изменение");
	
	ДобавитьОписаниеСвойстваОбъекта("ПараметрыВнешнегоУправленияСеансами",
									"external-session-manager-connection-string", ,
									"Чтение, Изменение");
	
	ДобавитьОписаниеСвойстваОбъекта("ОбязательноеВнешнееУправлениеСеансами"	, "external-session-manager-required",
									Перечисления.ДаНет.Нет,
									"Чтение, Изменение");

	ДобавитьОписаниеСвойстваОбъекта("ПрофильБезопасности"					, "security-profile-name", ,
									"Чтение, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("ПрофильБезопасностиБезопасногоРежима"	, "safe-mode-security-profile-name", ,
									"Чтение, Изменение");
									
	ДобавитьОписаниеСвойстваОбъекта("СмещениеДат"							, "date-offset", "2000",
									"Добавление");
	ДобавитьОписаниеСвойстваОбъекта("Описание"								, "descr", ,
									"Чтение, Изменение");

КонецПроцедуры // Параметры_ИБ_Свойства()

// Процедура заполняет общие параметры запуска команд информационных баз
//
Процедура Параметры_ИБ_Общие()

	ПараметрыЗапуска = Новый Массив();

	ДобавитьПараметрПоИмени("СтрокаПодключенияАгента");

	ДобавитьПараметрСтроку("infobase");

	ДобавитьПараметрПоШаблону("--cluster=%1", "ИдентификаторКластера");
	ДобавитьПараметрПоИмени("СтрокаАвторизацииКластера");

КонецПроцедуры // Параметры_ИБ_Общие()

// Процедура заполняет параметры команды получения списка информационных баз
//
Процедура Параметры_ИБ_Список() Экспорт

	Параметры_ИБ_Общие();

	ДобавитьПараметрСтроку("summary");
	ДобавитьПараметрСтроку("list");

КонецПроцедуры // Параметры_ИБ_Список()

// Процедура заполняет параметры команды получения сокращенного описания информационной базы
//
Процедура Параметры_ИБ_Описание() Экспорт

	Параметры_ИБ_Общие();

	ДобавитьПараметрСтроку("summary");
	ДобавитьПараметрСтроку("info");
	ДобавитьПараметрПоШаблону("--infobase=%1", "ИдентификаторИБ");

КонецПроцедуры // Параметры_ИБ_Описание()

// Процедура заполняет параметры команды получения полного описания информационной базы
//
Процедура Параметры_ИБ_ПолноеОписание() Экспорт

	Параметры_ИБ_Общие();

	ДобавитьПараметрСтроку("info");
	ДобавитьПараметрПоШаблону("--infobase=%1", "ИдентификаторИБ");
	ДобавитьПараметрПоИмени("СтрокаАвторизацииИБ");

КонецПроцедуры // Параметры_ИБ_ПолноеОписание()

// Процедура заполняет параметры команды добавления информационной базы
//
Процедура Параметры_ИБ_Добавить() Экспорт

	Параметры_ИБ_Общие();

	ДобавитьПараметрСтроку("create");
	
	ДобавитьПараметрПоШаблону("--name=%1"  , "Имя");
	ДобавитьПараметрПоШаблону("--locale=%1", "Локализация");
	
	Если ЗначениеФлага("СоздатьБазуСУБД") Тогда
		ДобавитьПараметрСтроку("--create-database");
	КонецЕсли;

	ДобавитьПрочиеПараметрыКоманды("Добавление");

КонецПроцедуры // Параметры_ИБ_Добавить()

// Процедура заполняет параметры команды изменения информационной базы
//
Процедура Параметры_ИБ_Изменить() Экспорт

	Параметры_ИБ_Общие();

	ДобавитьПараметрСтроку("update");

	ДобавитьПараметрПоШаблону("--infobase=%1", "ИдентификаторИБ");
	ДобавитьПараметрПоИмени("СтрокаАвторизацииИБ");

	ДобавитьПрочиеПараметрыКоманды("Изменение");

КонецПроцедуры // Параметры_ИБ_Изменить()

// Процедура заполняет параметры команды удаления информационной базы
//
Процедура Параметры_ИБ_Удалить() Экспорт

	Параметры_ИБ_Общие();

	ДобавитьПараметрСтроку("drop");

	ДобавитьПараметрПоШаблону("--infobase=%1", "ИдентификаторИБ");
	ДобавитьПараметрПоИмени("СтрокаАвторизацииИБ");

	Если ЗначенияПараметров.Получить("ДействияСБазойСУБД") = "drop" Тогда
		ДобавитьПараметрСтроку("--drop-database");
	ИначеЕсли ЗначенияПараметров.Получить("ДействияСБазойСУБД") = "clear" Тогда
		ДобавитьПараметрСтроку("--clear-database");
	КонецЕсли;

КонецПроцедуры // Параметры_ИБ_Удалить()

#КонецОбласти // ИнформационныеБазы

#Область Сеансы

// Процедура заполняет массив описаний свойств информационной базы
//
Процедура Параметры_Сеанс_Свойства() Экспорт

	ДобавитьОписаниеСвойстваОбъекта("Ид"							, "session");
	ДобавитьОписаниеСвойстваОбъекта("НомерСеанса"					, "session-id");
	ДобавитьОписаниеСвойстваОбъекта("ИнформационнаяБаза_Ид"			, "infobase");
	ДобавитьОписаниеСвойстваОбъекта("Соединение_Ид"					, "connection");
	ДобавитьОписаниеСвойстваОбъекта("Процесс_Ид"					, "process");
	ДобавитьОписаниеСвойстваОбъекта("Пользователь"					, "user-name");
	ДобавитьОписаниеСвойстваОбъекта("Компьютер"						, "host");
	ДобавитьОписаниеСвойстваОбъекта("Приложение"					, "app-id");
	ДобавитьОписаниеСвойстваОбъекта("Язык"							, "locale");
	ДобавитьОписаниеСвойстваОбъекта("ВремяНачала"					, "started-at");
	ДобавитьОписаниеСвойстваОбъекта("ПоследняяАктивность"			, "last-active-at");
	ДобавитьОписаниеСвойстваОбъекта("Спящий"						, "hibernate");
	ДобавитьОписаниеСвойстваОбъекта("ЗаснутьЧерез"					, "passive-session-hibernate-time");
	ДобавитьОписаниеСвойстваОбъекта("ЗавершитьЧерез"				, "hibernate-session-terminate-time");
	ДобавитьОписаниеСвойстваОбъекта("ЗаблокированоСУБД"				, "blocked-by-dbms");
	ДобавитьОписаниеСвойстваОбъекта("ЗаблокированоУпр"				, "blocked-by-ls");
	ДобавитьОписаниеСвойстваОбъекта("ДанныхВсего"					, "bytes-all");
	ДобавитьОписаниеСвойстваОбъекта("Данных5мин"					, "bytes-last-5min");
	ДобавитьОписаниеСвойстваОбъекта("КоличествоВызововВсего"		, "calls-all");
	ДобавитьОписаниеСвойстваОбъекта("КоличествоВызовов5мин"			, "calls-last-5min");
	ДобавитьОписаниеСвойстваОбъекта("ДанныхСУБДВсего"				, "dbms-bytes-all");
	ДобавитьОписаниеСвойстваОбъекта("ДанныхСУБД5мин"				, "dbms-bytes-last-5min");
	ДобавитьОписаниеСвойстваОбъекта("СоединениеССУБД"				, "db-proc-info");
	ДобавитьОписаниеСвойстваОбъекта("ЗахваченоСУБД"					, "db-proc-took");
	ДобавитьОписаниеСвойстваОбъекта("ВремяЗахватаСУБД"				, "db-proc-took-at");
	ДобавитьОписаниеСвойстваОбъекта("ВремяВызововВсего"				, "duration-all");
	ДобавитьОписаниеСвойстваОбъекта("ВремяВызововСУБДВсего"			, "duration-all-dbms");
	ДобавитьОписаниеСвойстваОбъекта("ВремяВызововТекущее"			, "duration-current");
	ДобавитьОписаниеСвойстваОбъекта("ВремяВызововСУБДТекущее"		, "duration-current-dbms");
	ДобавитьОписаниеСвойстваОбъекта("ВремяВызовов5мин"				, "duration-last-5min");
	ДобавитьОписаниеСвойстваОбъекта("ВремяВызововСУБД5мин"			, "duration-last-5min-dbms");
		 
КонецПроцедуры // Параметры_Сеанс_Свойства()

// Процедура заполняет общие параметры запуска команд сеансов
//
Процедура Параметры_Сеанс_Общие()

	ПараметрыЗапуска = Новый Массив();

	ДобавитьПараметрПоИмени("СтрокаПодключенияАгента");

	ДобавитьПараметрСтроку("session");

	ДобавитьПараметрПоШаблону("--cluster=%1", "ИдентификаторКластера", Истина);
	ДобавитьПараметрПоИмени("СтрокаАвторизацииКластера");

КонецПроцедуры // Параметры_ИБ_Общие()

// Процедура заполняет параметры команды получения списка сеансов
//
Процедура Параметры_Сеанс_Список() Экспорт

	Параметры_ИБ_Общие();

	ДобавитьПараметрСтроку("list");
	ДобавитьПараметрПоШаблону("--infobase=%1", "ИдентификаторИБ");

КонецПроцедуры // Параметры_Сеанс_Список()

// Процедура заполняет параметры команды получения описания сеанса
//
Процедура Параметры_Сеанс_Описание() Экспорт

	Параметры_ИБ_Общие();

	ДобавитьПараметрСтроку("info");
	ДобавитьПараметрПоШаблону("--session=%1", "ИдентификаторСеанса", Истина);

КонецПроцедуры // Параметры_Сеанс_Описание()

// Процедура заполняет параметры команды удаления сеанса
//
Процедура Параметры_Сеанс_Удалить() Экспорт

	Параметры_ИБ_Общие();

	ДобавитьПараметрСтроку("terminate");

	ДобавитьПараметрПоШаблону("--session=%1", "ИдентификаторСеанса", Истина);

КонецПроцедуры // Параметры_Сеанс_Удалить()

#КонецОбласти // Сеансы

#Область СчетчикиПотребленияРесурсов

// Процедура заполняет массив описаний параметров рабочего процесса
//
Процедура Параметры_СчетчикПотребленияРесурсов_Свойства() Экспорт

    ДобавитьОписаниеСвойстваОбъекта("Имя"								, "name");
	ДобавитьОписаниеСвойстваОбъекта("ДлительностьСбора"					, "collection-time");
	ДобавитьОписаниеСвойстваОбъекта("ДлительностьСбораМс"				, "duration");
	ДобавитьОписаниеСвойстваОбъекта("Группировка"						, "group");
	ДобавитьОписаниеСвойстваОбъекта("ТипОтбора"							, "filter-type");
	ДобавитьОписаниеСвойстваОбъекта("Отбор"								, "filter");
	ДобавитьОписаниеСвойстваОбъекта("ПроцессорноеВремя"					, "cpu-time");
	ДобавитьОписаниеСвойстваОбъекта("ДлительностьВызововСУБД"			, "duration-dbms");
	ДобавитьОписаниеСвойстваОбъекта("ДлительностьВызововСервисов"		, "service");
	ДобавитьОписаниеСвойстваОбъекта("ПотреблениеПамяти"					, "memory");
	ДобавитьОписаниеСвойстваОбъекта("ОбъемИнформацииСчитаннойСДиска"	, "read");
	ДобавитьОписаниеСвойстваОбъекта("ОбъемИнформацииЗаписаннойНаДиск"	, "write");
	ДобавитьОписаниеСвойстваОбъекта("ОбъемИнформацииПереданнойСУБД"		, "dbms-bytes");
	ДобавитьОписаниеСвойстваОбъекта("КоличествоСерверныхВызовов"		, "call");
	ДобавитьОписаниеСвойстваОбъекта("КоличествоАктивныхСеансов"			, "number-of-active-sessions");
	ДобавитьОписаниеСвойстваОбъекта("КоличествоСеансов"					, "number-of-sessions");
	ДобавитьОписаниеСвойстваОбъекта("Описание"							, "descr");

КонецПроцедуры // Параметры_СчетчикПотребленияРесурсов_Свойства()

// Процедура заполняет общие параметры запуска команд счетчиков потребления ресурсов
//
Процедура Параметры_СчетчикПотребленияРесурсов_Общие()

	ПараметрыЗапуска = Новый Массив();

	ДобавитьПараметрПоИмени("СтрокаПодключенияАгента");

	ДобавитьПараметрСтроку("counter");

	ДобавитьПараметрПоШаблону("--cluster=%1", "ИдентификаторКластера");
	ДобавитьПараметрПоИмени("СтрокаАвторизацииКластера");

КонецПроцедуры // Параметры_СчетчикПотребленияРесурсов_Общие()

// Процедура заполняет параметры команды получения списка счетчиков потребления ресурсов
//
Процедура Параметры_СчетчикПотребленияРесурсов_Список() Экспорт

	Параметры_СчетчикПотребленияРесурсов_Общие();

	ДобавитьПараметрСтроку("list");

КонецПроцедуры // Параметры_СчетчикПотребленияРесурсов_Список()

// Процедура заполняет параметры команды изменения счетчика потребления ресурсов
//
Процедура Параметры_СчетчикПотребленияРесурсов_Изменить() Экспорт

	Параметры_СчетчикПотребленияРесурсов_Общие();

	ДобавитьПараметрСтроку("update");

	ДобавитьПараметрПоШаблону("--name=%1"                     , "Имя");
	ДобавитьПараметрПоШаблону("--collection-time=%1"          , "ДлительностьСбора");
	ДобавитьПараметрПоШаблону("--group=%1"                    , "Группировка");
	ДобавитьПараметрПоШаблону("--filter-type=%1"              , "ТипОтбора");
	ДобавитьПараметрПоШаблону("--filter=%1"                   , "Отбор");
	ДобавитьПараметрПоШаблону("--duration=%1"                 , "ДлительностьСбораМс");
	ДобавитьПараметрПоШаблону("--cpu-time=%1"                 , "ПроцессорноеВремя");
	ДобавитьПараметрПоШаблону("--memory=%1"                   , "ПотреблениеПамяти");
	ДобавитьПараметрПоШаблону("--read=%1"                     , "ОбъемИнформацииСчитаннойСДиска");
	ДобавитьПараметрПоШаблону("--write=%1"                    , "ОбъемИнформацииЗаписаннойНаДиск");
	ДобавитьПараметрПоШаблону("--duration-dbms=%1"            , "ДлительностьВызововСУБД");
	ДобавитьПараметрПоШаблону("--dbms-bytes=%1"               , "ОбъемИнформацииПереданнойСУБД");
	ДобавитьПараметрПоШаблону("--service=%1"                  , "ДлительностьВызововСервисов");
	ДобавитьПараметрПоШаблону("--call=%1"                     , "КоличествоСерверныхВызовов");
	ДобавитьПараметрПоШаблону("--number-of-active-sessions=%1", "КоличествоАктивныхСеансов");
	ДобавитьПараметрПоШаблону("--number-of-sessions=%1"       , "КоличествоСеансов");
	ДобавитьПараметрПоШаблону("--descr=%1"                    , "Описание");
	
	ДобавитьПрочиеПараметрыКоманды("Изменение");

КонецПроцедуры // Параметры_СчетчикПотребленияРесурсов_Изменить()

// Процедура заполняет параметры команды получения описания счетчика потребления ресурсов
//
Процедура Параметры_СчетчикПотребленияРесурсов_Описание() Экспорт

	Параметры_СчетчикПотребленияРесурсов_Общие();

	ДобавитьПараметрСтроку("info");
	ДобавитьПараметрПоШаблону("--counter=%1", "ИмяСчетчика");

КонецПроцедуры // Параметры_СчетчикПотребленияРесурсов_Описание()

// Процедура заполняет параметры команды удаления сервера
//
Процедура Параметры_СчетчикПотребленияРесурсов_Значения() Экспорт

	Параметры_СчетчикПотребленияРесурсов_Общие();

	ДобавитьПараметрСтроку("values");

	ДобавитьПараметрПоШаблону("--counter=%1", "ИмяСчетчика");
	ДобавитьПараметрПоШаблону("--object=%1" , "Отбор");
	
КонецПроцедуры // Параметры_СчетчикПотребленияРесурсов_Значения()

// Процедура заполняет параметры команды удаления счетчика потребления ресурсов
//
Процедура Параметры_СчетчикПотребленияРесурсов_Удалить() Экспорт

	Параметры_СчетчикПотребленияРесурсов_Общие();

	ДобавитьПараметрСтроку("remove");

	ДобавитьПараметрПоШаблону("--name=%1", "ИмяСчетчика");

КонецПроцедуры // Параметры_СчетчикПотребленияРесурсов_Удалить()

#КонецОбласти // СчетчикиПотребленияРесурсов

#КонецОбласти // ПроцедурыЗаполненияПараметровОбъектов

#Область СлужебныеПроцедуры

// Процедура заполняет структуру правил заполнения описаний свойств и команд объектов
//
Процедура ЗаполнитьПолучениеПараметровОбъекта()

	ОписанияОбъектов = Новый Соответствие();

	ОписанияОбъектов.Вставить("Кластер:cluster"                        , "Список:list, 
	                                                                     |Описание:info,
												                         |Добавить:insert,
												                         |Изменить:update,
												                         |Удалить:remove");
	
	ОписанияОбъектов.Вставить("Агент.Администратор:agent.admin"        , "Список:list, 
												                         |Добавить:register,
												                         |Удалить:remove");
	
	ОписанияОбъектов.Вставить("Кластер.Администратор:cluster.admin"    , "Список:list, 
												                         |Добавить:register,
												                         |Удалить:remove");
	
	ОписанияОбъектов.Вставить("МенеджерКластера:manager"               , "Список:list, 
	                                                                     |Описание:info");
	
	ОписанияОбъектов.Вставить("Сервис:service"                         , "Список:list");
	
	ОписанияОбъектов.Вставить("Сервер:server"                          , "Список:list, 
	                                                                     |Описание:info,
												                         |Добавить:insert,
												                         |Изменить:update,
												                         |Удалить:remove");
	
	ОписанияОбъектов.Вставить("РабочийПроцесс:process"                 , "Список:list, 
	                                                                     |Описание:info");
	
	ОписанияОбъектов.Вставить("РабочийПроцесс.Лицензия:process.license", "Список:list, 
	                                                                     |Описание:info");
	
	ОписанияОбъектов.Вставить("Сеанс:session"                          , "Список:list, 
	                                                                     |Описание:info,
	                                                                     |Удалить:terminate");
	
	ОписанияОбъектов.Вставить("Сеанс.Лицензия:session.license"         , "Список:list, 
	                                                                     |Описание:info");
	
	ОписанияОбъектов.Вставить("Соединение:connection"                  , "Список:list, 
	                                                                     |Описание:info,
	                                                                     |Удалить:disconnect");
	
	ОписанияОбъектов.Вставить("ИБ:infobase"                            , "Список:list, 
	                                                                     |Описание:summary,
											                             |ПолноеОписание:info,
											                             |Добавить:create,
											                             |Изменить:update,
											                             |Удалить:remove");

	ОписанияОбъектов.Вставить("Блокировка:lock"                        , "Список:list");
	
	ОписанияОбъектов.Вставить("ТребованиеНазначения:rule"              , "Список:list, 
	                                                                     |Описание:info,
											                             |Добавить:insert,
											                             |Изменить:update,
											                             |Удалить:remove,
											                             |Применить:apply");

	ОписанияОбъектов.Вставить("Профиль:profile"                        , "Список:list, 
											                             |Изменить:update,
											                             |Удалить:remove");

	ОписанияОбъектов.Вставить("Профиль.Каталог:profile.directory"      , "Список:list, 
											                             |Изменить:update,
											                             |Удалить:remove");

	ОписанияОбъектов.Вставить("Профиль.COMКласс:profile.com"           , "Список:list, 
											                             |Изменить:update,
											                             |Удалить:remove");

	ОписанияОбъектов.Вставить("Профиль.Компонент:profile.addin"        , "Список:list, 
											                             |Изменить:update,
											                             |Удалить:remove");

	ОписанияОбъектов.Вставить("Профиль.Модуль:profile.module"          , "Список:list, 
											                             |Изменить:update,
											                             |Удалить:remove");

	ОписанияОбъектов.Вставить("Профиль.Приложение:profile.app"         , "Список:list, 
											                             |Изменить:update,
											                             |Удалить:remove");

	ОписанияОбъектов.Вставить("Профиль.ИнтернетРесурс:profile.inet"    , "Список:list, 
											                             |Изменить:update,
											                             |Удалить:remove");

	ОписанияОбъектов.Вставить("СчетчикПотребленияРесурсов:counter"    , "Список:list, 
											                             |Изменить:update,
											                             |Значения:values,
											                             |Удалить:remove");

	Для Каждого ТекОписание Из ОписанияОбъектов Цикл
		ДобавитьПолучениеПараметровОбъекта(ТекОписание.Ключ, ТекОписание.Значение);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПолучениеПараметровОбъекта()

// Процедура добавляет правило заполнения описания свойств и команд объекта
//
Процедура ДобавитьПолучениеПараметровОбъекта(ИменаТипаОбъекта, ДоступныеКоманды)

	Если НЕ ТипЗнч(ПолучениеПараметровОбъектов) = Тип("Соответствие") Тогда
		ПолучениеПараметровОбъектов = Новый Соответствие();
	КонецЕсли;

	МассивИменТипов = СтрРазделить(ИменаТипаОбъекта, ":");

	ОсновноеИмяТипа = СокрЛП(МассивИменТипов[0]);
	ИмяПроцедуры = "Параметры_" + СтрЗаменить(ОсновноеИмяТипа, ".", "_") + "_Свойства"; 

	ПолучениеПараметровОбъекта = Новый Соответствие();
	ПолучениеПараметровОбъекта.Вставить("ИмяТипа", ОсновноеИмяТипа);
	ПолучениеПараметровОбъекта.Вставить("Параметры", ИмяПроцедуры);

	МассивКоманд = СтрРазделить(ДоступныеКоманды, ",");

	ПолучениеПараметровКоманд = Новый Соответствие();

	Для Каждого ТекИменаКоманды Из МассивКоманд Цикл
		МассивИменКоманды = СтрРазделить(СокрЛП(ТекИменаКоманды), ":");

		ОсновноеИмяКоманды = СокрЛП(МассивИменКоманды[0]);
		ИмяПроцедуры = "Параметры_" + СтрЗаменить(ОсновноеИмяТипа, ".", "_") + "_" + ОсновноеИмяКоманды;

		ПолучениеПараметровКоманды = Новый Соответствие();
		ПолучениеПараметровКоманды.Вставить("ИмяКоманды", ОсновноеИмяКоманды);
		ПолучениеПараметровКоманды.Вставить("Параметры", ИмяПроцедуры);

		Для Каждого ТекИмяКоманды Из МассивИменКоманды Цикл
			ПолучениеПараметровКоманд.Вставить(ВРег(СокрЛП(ТекИмяКоманды)), ПолучениеПараметровКоманды);
		КонецЦикла;
	КонецЦикла;

	ПолучениеПараметровОбъекта.Вставить("Команды", ПолучениеПараметровКоманд);

	Для Каждого ТекИмяТипа Из МассивИменТипов Цикл
		ПолучениеПараметровОбъектов.Вставить(ВРег(СокрЛП(ТекИмяТипа)), ПолучениеПараметровОбъекта);
	КонецЦикла;

КонецПроцедуры // ДобавитьПолучениеПараметровОбъекта()

// Процедура добавляет описание свойства в массив свойств
//   
// Параметры:
//   ИмяПараметра           - Строка                - имя свойства объекта
//   ИмяПоляРАК             - Строка                - имя свойства, как оно возвращается утилитой RAC
//   ЗначениеПоУмолчанию    - Произвольный          - значение свойства объекта по умолчанию
//   Использование          - Строка, Структура     - строка содержащая флаги использования, разделенные ","
//                                                    (Чтение, Добавление, Изменение)
//                                                    если указана структура, то в значении можно переопределить
//                                                    имя параметра утилиты RAC
//   
Процедура ДобавитьОписаниеСвойстваОбъекта(Знач ИмяПараметра
										, Знач ИмяПоляРАК
										, Знач ЗначениеПоУмолчанию = ""
										, Знач Использование = "Чтение")

	Если НЕ ТипЗнч(ОписаниеСвойств) = Тип("Массив") Тогда
		ОписаниеСвойств = Новый Массив();
	КонецЕсли;

	Если ТипЗнч(Использование) = Тип("Строка") Тогда
		Использование = Новый Структура(Использование);
	ИначеЕсли НЕ ТипЗнч(Использование) = Тип("Структура") Тогда
		Использование = Новый Структура();
	КонецЕсли;

	ОписаниеСвойства = Новый Структура();
	ОписаниеСвойства.Вставить("ИмяПараметра"        , ИмяПараметра);
	ОписаниеСвойства.Вставить("ИмяПоляРак"          , ИмяПоляРак);
	ОписаниеСвойства.Вставить("ПараметрКоманды"     , "");
	ОписаниеСвойства.Вставить("ЗначениеПоУмолчанию" , ЗначениеПоУмолчанию);
	ОписаниеСвойства.Вставить("Чтение"              , Использование.Свойство("Чтение"));
	ОписаниеСвойства.Вставить("Добавление"          , Использование.Свойство("Добавление"));
	ОписаниеСвойства.Вставить("Изменение"           , Использование.Свойство("Изменение"));

	Если Использование.Свойство("ПараметрКоманды") Тогда
		ОписаниеСвойства.ПараметрКоманды = Использование.ПараметрКоманды;
	ИначеЕсли ОписаниеСвойства.Добавление ИЛИ ОписаниеСвойства.Изменение Тогда
		ОписаниеСвойства.ПараметрКоманды = "--" + ОписаниеСвойства.ИмяПоляРАК;
	КонецЕсли;

	ОписаниеСвойств.Добавить(ОписаниеСвойства);

КонецПроцедуры // ДобавитьОписаниеСвойстваОбъекта()

// Процедура добавляет параметры команды из описания свойств объекта
// проверяя флаг использования свойства для различных операций
//   
// Параметры:
//   ИмяФлагаРазрешения	       - Строка          - имя проверяемого флага разрешения
//                                                 (Чтение, Добавление, Изменение и т.п.)
//   ВключаяПараметры	       - Строка          - список добавляемых параметров, разделенных ","
//   ИсключаяПараметры	       - Строка          - список исключаемых параметров, разделенных ","
//   
Процедура ДобавитьПрочиеПараметрыКоманды(Знач ИмяФлагаРазрешения
									   , Знач ВключаяПараметры = ""
									   , Знач ИсключаяПараметры = "")

	Если ЗначениеЗаполнено(ВключаяПараметры) Тогда
		ВключаяПараметры = СтрРазделить(ВключаяПараметры, ",", Ложь);
		Для й = 0 По ВключаяПараметры.ВГраница() Цикл
			ВключаяПараметры[й] = СокрЛП(ВключаяПараметры[й]);
		КонецЦикла;
	Иначе
		ВключаяПараметры = Новый Массив();
	КонецЕсли;

	ИсключаяПараметры = СтрРазделить(ИсключаяПараметры, ",", Ложь);
	Для й = 0 По ИсключаяПараметры.ВГраница() Цикл
		ИсключаяПараметры[й] = СокрЛП(ИсключаяПараметры[й]);
	КонецЦикла;

	ВсеПараметры = ОписаниеСвойств();

	Для Каждого ТекЭлемент Из ВсеПараметры Цикл
		Если ВключаяПараметры.Количество() > 0 Тогда
			Если ВключаяПараметры.Найти(ТекЭлемент.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если ИсключаяПараметры.Количество() > 0 Тогда
			Если НЕ ИсключаяПараметры.Найти(ТекЭлемент.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ТекЭлемент.Значение[ИмяФлагаРазрешения] Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначенияПараметров.Получить(ТекЭлемент.Ключ) = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекЭлемент.Значение.ЗначениеПоУмолчанию) Тогда
				ЗначенияПараметров.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение.ЗначениеПоУмолчанию);
			КонецЕсли;
		КонецЕсли;
		ДобавитьПараметрПоШаблону(ТекЭлемент.Значение.ПараметрКоманды + "=%1", ТекЭлемент.Ключ);
	КонецЦикла;

КонецПроцедуры // ДобавитьПрочиеПараметрыКоманды()

// Процедура добавляет переданное значение в массив параметров запуска команды
//   
// Параметры:
//   Параметр		        - Строка            - добавляемое значение
//   Обязательный           - Булево            - Истина - если параметр не заполнен будет выдано исключение
//   ДобавлятьПустой        - Булево            - Истина - если параметр не заполнен будет добавлена пустая строка
//   
Процедура ДобавитьПараметрСтроку(Знач Параметр, Обязательный = Ложь, ДобавлятьПустой = Истина)

	Если НЕ ТипЗнч(ПараметрыЗапуска) = Тип("Массив") Тогда
		ПараметрыЗапуска = Новый Массив();
	КонецЕсли;
	
	Если НЕ ТипЗнч(Параметр) = Тип("Строка") Тогда
		Параметр = "";
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Параметр) И Обязательный Тогда
		ВызватьИсключение "Не заполнен обязательный параметр!";
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметр) ИЛИ ДобавлятьПустой Тогда
		ПараметрыЗапуска.Добавить(Параметр);
	КонецЕсли;

КонецПроцедуры // ДобавитьПараметрСтроку()

// Процедура добавляет значение параметра из структуры значений параметров в массив параметров запуска команды
//   
// Параметры:
//   ИмяПараметра	        - Строка            - имя параметра в структуре значений параметров
//   Обязательный           - Булево            - Истина - если значение параметра не найдено
//                                                         или не заполнено будет выдано исключение
//   ДобавлятьПустой        - Булево            - Истина - если значение параметра не найдено
//                                                         или не заполнено будет добавлена пустая строка
//   
Процедура ДобавитьПараметрПоИмени(Знач ИмяПараметра, Обязательный = Ложь, ДобавлятьПустой = Истина)

	Если НЕ ТипЗнч(ПараметрыЗапуска) = Тип("Массив") Тогда
		ПараметрыЗапуска = Новый Массив();
	КонецЕсли;
	
	Параметр = ЗначенияПараметров.Получить(ИмяПараметра);
	Если Параметр = Неопределено Тогда
		Параметр = "";
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Параметр) И Обязательный Тогда
		ВызватьИсключение СтрШаблон("Не заполнен обязательный параметр %1!", ИмяПараметра);
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметр) ИЛИ ДобавлятьПустой Тогда
		ПараметрыЗапуска.Добавить(Параметр);
	КонецЕсли;

КонецПроцедуры // ДобавитьПараметрПоИмени()

// Процедура выполняет подстановку значения параметра из структуры значений параметров в шаблон
// и добавляет результат в массив параметров запуска команды
//   
// Параметры:
//   ШаблонПараметра        - Строка            - шаблон, в который будет выполнена подстановка
//   ИмяПараметра	        - Строка            - имя параметра в структуре значений параметров
//   Обязательный           - Булево            - Истина - если значение параметра не найдено
//                                                         или не заполнено будет выдано исключение
//   
Процедура ДобавитьПараметрПоШаблону(Знач ШаблонПараметра, Знач ИмяПараметра, Знач Обязательный = Ложь)

	Если НЕ ТипЗнч(ПараметрыЗапуска) = Тип("Массив") Тогда
		ПараметрыЗапуска = Новый Массив();
	КонецЕсли;
	
	ЗначениеПараметра = ЗначенияПараметров.Получить(ИмяПараметра);

	Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		Если Обязательный Тогда
			ВызватьИсключение СтрШаблон("Не заполнен обязательный параметр %1!", ИмяПараметра);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПараметрыЗапуска.Добавить(СтрШаблон(ШаблонПараметра, ЗначениеПараметра));

КонецПроцедуры // ДобавитьПараметрПоШаблону()

// Функция возвращает значение параметра-флага из структуры значений параметров
//   
// Параметры:
//   ИмяПараметра	        - Строка            - имя параметра в структуре значений параметров
//   
// Возвращаемое значение:
//	Булево          - значение флага, если параметр отсутствует в структуре значений параметров,
//                    возвращается Ложь
//
Функция ЗначениеФлага(Знач ИмяПараметра)

	Параметр = ЗначенияПараметров.Получить(ИмяПараметра);
	Если Параметр = Неопределено Тогда
		Параметр = Ложь;
	КонецЕсли;

	Возврат Параметр;

КонецФункции // ЗначениеФлага()

#КонецОбласти // СлужебныеПроцедуры

Лог = Логирование.ПолучитьЛог("ktb.lib.irac");
