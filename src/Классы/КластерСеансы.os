Перем Кластер_Агент;
Перем Кластер_Владелец;
Перем ИБ_Владелец;
Перем Элементы;

Перем ПериодОбновления;
Перем МоментАктуальности;

Перем Лог;

// Конструктор
//   
// Параметры:
//   АгентКластера	- АгентКластера			- ссылка на родительский объект агента кластера
//   Кластер		- Кластер				- ссылка на родительский объект кластера
//   ИБ				- ИнформационнаяБаза	- ссылка на родительский объект информационной базы
//
Процедура ПриСозданииОбъекта(АгентКластера, Кластер, ИБ = Неопределено)

	Кластер_Агент = АгентКластера;
	Кластер_Владелец = Кластер;
	ИБ_Владелец = ИБ;

	Элементы = Неопределено;

	ПериодОбновления = 60000;

КонецПроцедуры // ПриСозданииОбъекта()

// Процедура получает данные от сервиса администрирования кластера 1С
// и сохраняет в локальных переменных
//   
Процедура ОбновитьДанные()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("session");
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Владелец.Ид()));
	ПараметрыЗапуска.Добавить(Кластер_Владелец.СтрокаАвторизации());

	Если НЕ ИБ_Владелец = Неопределено Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--infobase=%1", ИБ_Владелец.Ид()));
	КонецЕсли;

	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Элементы = Служебный.РазобратьВыводКоманды(Служебный.ВыводКоманды());

	МоментАктуальности = ТекущаяУниверсальнаяДатаВМиллисекундах();

КонецПроцедуры // ОбновитьДанные()

// Функция возвращает список менеджеров кластера 1С
//   
// Параметры:
//   ОбновитьДанные 		- Булево		- Истина - обновить список (вызов RAC)
//   ПоляУпорядочивания 	- Строка		- Список полей упорядочивания списка сеансов, разделенные ","
//											  если не указаны, то идентификатор сеанса session
//
// Возвращаемое значение:
//	Соответствие - список менеджеров кластера 1С
//
Функция ПолучитьСписок(ОбновитьДанные = Ложь, Знач ПоляУпорядочивания = "") Экспорт

	Если ТребуетсяОбновление(ОбновитьДанные) Тогда
		ОбновитьДанные();
	КонецЕсли;

	МассивУпорядочивания = СтрРазделить(ПоляУпорядочивания, ",", Ложь);

	СписокСеансов = Новый Соответствие();

	Если МассивУпорядочивания.Количество() = 0 Тогда
		Для Каждого ТекЭлемент Из Элементы Цикл
			СписокСеансов.Вставить(ТекЭлемент.session, ТекЭлемент);
		КонецЦикла;
	Иначе
		Для Каждого ИмяПоля Из МассивУпорядочивания Цикл
			//TODO: Реализовать рекурсивное заполнение сеансов
		КонецЦикла;
	КонецЕсли;

	Возврат СписокСеансов;

КонецФункции // ПолучитьСписок()

Функция ТребуетсяОбновление(ОбновитьДанные = Ложь)

	Возврат (ОбновитьДанные ИЛИ Элементы = Неопределено ИЛИ НЕ ЭлементыАктуальны());

КонецФункции // ТребуетсяОбновление()

Функция ЭлементыАктуальны()

	Возврат ПериодОбновления < (МоментАктуальности - ТекущаяУниверсальнаяДатаВМиллисекундах());

КонецФункции // ЭлементыАктуальны()

// Функция возвращает описание сеанса кластера 1С
//   
// Параметры:
//   Отбор			 	- Строка, Структура		- Строка вида <Имя ИБ>:<номер сеанса>
//												  или Структура отбора сеансов (Поле: значение)
//   ОбновитьДанные 	- Булево				- Истина - обновить список (вызов RAC)
//
// Возвращаемое значение:
//	Соответствие - описание менеджера кластера 1С
//
Функция Получить(Отбор, ОбновитьДанные = Ложь) Экспорт

	Если ТребуетсяОбновление(ОбновитьДанные) Тогда
		ОбновитьДанные();
	КонецЕсли;

	Возврат Элементы[Отбор.infobase + ":" + Отбор.session];

КонецФункции // Получить()

// Функция возвращает коллекцию параметров объекта
//   
// Параметры:
//   ИмяПоляКлюча 		- Строка	- имя поля, значение которого будет использовано
//									  в качестве ключа возвращаемого соответствия
//   
// Возвращаемое значение:
//	Соответствие - коллекция параметров объекта, для получения/изменения значений
//
Функция ПолучитьСтруктуруПараметровОбъекта(ИмяПоляКлюча = "ИмяПараметра")
	
	СтруктураПараметров = Новый Соответствие();

	// Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
	// 		"ИнтервалПерезапуска"							, "lifetime-limit", 0);

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровОбъекта()

Лог = Логирование.ПолучитьЛог("ktb.lib.irac");
