Перем Кластер_Агент;
Перем Элементы;

Перем Лог;

// Конструктор
//   
// Параметры:
//   АгентКластера			- АгентКластера	- ссылка на родительский объект агента кластера
//
Процедура ПриСозданииОбъекта(АгентКластера)

	Кластер_Агент = АгентКластера;

	Элементы = Новый ОбъектыКластера(ЭтотОбъект);

КонецПроцедуры // ПриСозданииОбъекта()

// Процедура получает данные от сервиса администрирования кластера 1С
// и сохраняет в локальных переменных
//   
// Параметры:
//   ОбновитьПринудительно 		- Булево	- Истина - принудительно обновить данные (вызов RAC)
//											- Ложь - данные будут получены если истекло время актуальности
//													или данные не были получены ранее
//   
Процедура ОбновитьДанные(ОбновитьПринудительно = Ложь) Экспорт

	Если НЕ Элементы.ТребуетсяОбновление(ОбновитьПринудительно) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("list");

	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	МассивРезультатов = Служебный.РазобратьВыводКоманды(Служебный.ВыводКоманды());

	МассивКластеров = Новый Массив();
	Для Каждого ТекОписание Из МассивРезультатов Цикл
		МассивКластеров.Добавить(Новый Кластер(Кластер_Агент, ТекОписание["cluster"]));
	КонецЦикла;

	Элементы.Заполнить(МассивКластеров);

	Элементы.УстановитьАктуальность();

КонецПроцедуры // ОбновитьДанные()

// Функция возвращает список кластеров 1С
//   
// Параметры:
//   ПоляУпорядочивания 	- Строка		- Список полей упорядочивания списка администратор, разделенные ","
//											  если не указаны, то имя администратора name
//   ОбновитьПринудительно 	- Булево		- Истина - обновить список (вызов RAC)
//
// Возвращаемое значение:
//	Соответствие - список кластеров 1С
//
Функция ПолучитьСписок(Знач ПоляУпорядочивания = "", ОбновитьПринудительно = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(ПоляУпорядочивания) Тогда
		ПоляУпорядочивания = "name";
	КонецЕсли;

	СписокКластеров = Элементы.ПолучитьСписок(ПоляУпорядочивания, ОбновитьПринудительно);
	
	Возврат СписокКластеров;

КонецФункции // ПолучитьСписок()

// Функция возвращает описание кластера 1С
//   
// Параметры:
//   Отбор				 	- Структура	- Структура отбора кластеров (<поле>:<значение>)
//   ОбновитьПринудительно 	- Булево	- Истина - принудительно обновить данные (вызов RAC)
//
// Возвращаемое значение:
//	Соответствие - описание кластера 1С
//
Функция Получить(Отбор, ОбновитьПринудительно = Ложь) Экспорт

	СписокКластеров = Элементы.Получить(Отбор, ОбновитьПринудительно);
	
	Возврат СписокКластеров;

КонецФункции // Получить()

// Процедура добавляет новый кластер 1С
//   
// Параметры:
//   Имя			 	- Строка		- имя кластера 1С
//   Сервер			 	- Строка		- адрес сервера кластера 1С
//   Порт			 	- Число			- порт сервера кластера 1С
//   ПараметрыКластера 	- Структура		- параметры кластера 1С
//
Процедура Добавить(Имя, Сервер = "localhost", Порт = 1541, ПараметрыКластера = Неопределено) Экспорт

	Если НЕ ТипЗнч(ПараметрыКластера) = Тип("Структура") Тогда
		ПараметрыКластера = Новый Структура();
	КонецЕсли;

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("insert");

	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаАвторизации());

	ПараметрыЗапуска.Добавить(СтрШаблон("--host=%1", Сервер));
	ПараметрыЗапуска.Добавить(СтрШаблон("--port=%1", Порт));
	ПараметрыЗапуска.Добавить(СтрШаблон("--name=%1", Имя));

	ПараметрыОбъекта = ПолучитьСтруктуруПараметровОбъекта();

	Для Каждого ТекЭлемент Из ПараметрыОбъекта Цикл
		ЗначениеПараметра = Служебный.ПолучитьЗначениеИзСтруктуры(ПараметрыКластера, ТекЭлемент.Ключ, 0);
		ПараметрыЗапуска.Добавить(СтрШаблон(ТекЭлемент.Значение.ПараметрКоманды + "=%1", ЗначениеПараметра));
	КонецЦикла;

	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Лог.Информация(Служебный.ВыводКоманды());

	Элементы = Неопределено;

КонецПроцедуры // Добавить()

// Процедура удаляет кластер 1С
//   
// Параметры:
//   Имя			 	- Строка		- имя кластера 1С
//
Процедура Удалить(Имя) Экспорт
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("remove");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Получить(Имя).Ид()));

	ПараметрыЗапуска.Добавить(Получить(Имя).СтрокаАвторизации());
	
	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Лог.Информация(Служебный.ВыводКоманды());

	Элементы = Неопределено;

КонецПроцедуры // Удалить()

// Функция возвращает коллекцию параметров объекта
//   
// Параметры:
//   ИмяПоляКлюча 		- Строка	- имя поля, значение которого будет использовано
//									  в качестве ключа возвращаемого соответствия
//   
// Возвращаемое значение:
//	Соответствие - коллекция параметров объекта, для получения/изменения значений
//
Функция ПолучитьСтруктуруПараметровОбъекта(ИмяПоляКлюча = "ИмяПараметра") Экспорт
	
	СтруктураПараметров = Новый Соответствие();

	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"ИнтервалПерезапуска"							, "lifetime-limit", 0);
	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"ДопустимыйОбъемПамяти"							, "max-memory-size", 0);
	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"ИнтервалПревышенияДопустимогоОбъемаПамяти"		, "max-memory-time-limit", 0);
	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"ДопустимоеОтклонениеКоличестваОшибокСервера"	, "errors-count-threshold", 0);
	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"ПринудительноЗавершатьПроблемныеПроцессы"		, "kill-problem-processes", Перечисления.ДаНет.Нет);
	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"ВыключенныеПроцессыОстанавливатьЧерез"			, "expiration-timeout", 0);
	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"ЗащищенноеСоединение"							, "security-level", 0);
	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"УровеньОтказоустойчивости"						, "session-fault-tolerance-level", 0);
	Служебный.ДобавитьПараметрОписанияОбъекта(СтруктураПараметров, ИмяПоляКлюча,
			"РежимРаспределенияНагрузки"					, "load-balancing-mode",
			Перечисления.РежимыРаспределенияНагрузки.ПоПроизводительности);

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровОбъекта()

Лог = Логирование.ПолучитьЛог("ktb.lib.irac");
