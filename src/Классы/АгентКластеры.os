Перем Кластер_Агент;
Перем Элементы;
Перем Лог;

// Конструктор
//   
// Параметры:
//   АгентКластера			- АгентКластера	- ссылка на родительский объект агента кластера
//
Процедура ПриСозданииОбъекта(АгентКластера)

	Кластер_Агент = АгентКластера;
	ОбновитьДанные();

КонецПроцедуры // ПриСозданииОбъекта()

// Процедура получает данные от сервиса администрирования кластера 1С
// и сохраняет в локальных переменных
//   
Процедура ОбновитьДанные()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("list");

	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	МассивРезультатов = Служебный.РазобратьВыводКоманды(Служебный.ВыводКоманды());

	Элементы = Новый Соответствие();
	Для Каждого ТекОписание Из МассивРезультатов Цикл
		Элементы.Вставить(ТекОписание["name"], Новый Кластер(Кластер_Агент, ТекОписание["cluster"]));
	КонецЦикла;

КонецПроцедуры // ОбновитьДанные()

Функция ПолучитьСписок(ОбновитьДанные = Ложь) Экспорт

	Если ОбновитьДанные Тогда
		ОбновитьДанные();
	КонецЕсли;

	Возврат Элементы;

КонецФункции

Функция Получить(Имя, ОбновитьДанные = Ложь) Экспорт

	Если ОбновитьДанные Тогда
		ОбновитьДанные();
	КонецЕсли;

	Возврат Элементы[Имя];

КонецФункции

Процедура Добавить(Имя = "Локальный кластер", Сервер = "localhost", Порт = 1541, ПараметрыКластера = Неопределено) Экспорт

	Если НЕ ТипЗнч(ПараметрыКластера) = Тип("Структура") Тогда
		ПараметрыКластера = Новый Структура();
	КонецЕсли;

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("insert");

	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаАвторизации());

	ПараметрыЗапуска.Добавить(СтрШаблон("--host=%1", Сервер));
	ПараметрыЗапуска.Добавить(СтрШаблон("--port=%1", Порт));
	ПараметрыЗапуска.Добавить(СтрШаблон("--name=%1", Имя));

	ПараметрыЗапуска.Добавить(СтрШаблон("--lifetime-limit=%1",
		Служебный.ПолучитьЗначениеИзСтруктуры(ПараметрыКластера, "ИнтервалПерезапуска", 0)));
	ПараметрыЗапуска.Добавить(СтрШаблон("--max-memory-size=%1",
		Служебный.ПолучитьЗначениеИзСтруктуры(ПараметрыКластера, "ДопустимыйОбъемПамяти", 0)));
	ПараметрыЗапуска.Добавить(СтрШаблон("--max-memory-time-limit=%1",
		Служебный.ПолучитьЗначениеИзСтруктуры(ПараметрыКластера, "ИнтервалПревышенияДопустимогоОбъемаПамяти", 0)));
	ПараметрыЗапуска.Добавить(СтрШаблон("--errors-count-threshold=%1",
		Служебный.ПолучитьЗначениеИзСтруктуры(ПараметрыКластера, "ДопустимоеОтклонениеКоличестваОшибокСервера", 0)));
	ПараметрыЗапуска.Добавить(СтрШаблон("--kill-problem-processes=%1",
		Служебный.ПолучитьЗначениеИзСтруктуры(ПараметрыКластера, "ПринудительноЗавершатьПроблемныеПроцессы", ДаНет.Нет)));
	ПараметрыЗапуска.Добавить(СтрШаблон("--expiration-timeout=%1",
		Служебный.ПолучитьЗначениеИзСтруктуры(ПараметрыКластера, "ВыключенныеПроцессыОстанавливатьЧерез", 0)));
	ПараметрыЗапуска.Добавить(СтрШаблон("--security-level=%1",
		Служебный.ПолучитьЗначениеИзСтруктуры(ПараметрыКластера, "ЗащищенноеСоединение", 0)));
	ПараметрыЗапуска.Добавить(СтрШаблон("--session-fault-tolerance-level=%1",
		Служебный.ПолучитьЗначениеИзСтруктуры(ПараметрыКластера, "УровеньОтказоустойчивости", 0)));
	ПараметрыЗапуска.Добавить(СтрШаблон("--load-balancing-mode=%1",
		Служебный.ПолучитьЗначениеИзСтруктуры(ПараметрыКластера,
											  "РежимРаспределенияНагрузки",
											  РежимыРаспределенияНагрузки.ПоПроизводительности)));

	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Лог.Информация(Служебный.ВыводКоманды());

	ОбновитьДанные();

КонецПроцедуры

Процедура Удалить(Имя) Экспорт
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("remove");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Получить(Имя).Ид()));

	ПараметрыЗапуска.Добавить(Получить(Имя).СтрокаАвторизации());
	
	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Лог.Информация(Служебный.ВыводКоманды());

	ОбновитьДанные();

КонецПроцедуры

Лог = Логирование.ПолучитьЛог("ktb.lib.irac");
