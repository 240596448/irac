Перем Кластер_Агент;
Перем ПараметрыОбъекта;
Перем Элементы;

Перем Лог;

// Конструктор
//   
// Параметры:
//   АгентКластера			- АгентКластера	- ссылка на родительский объект агента кластера
//
Процедура ПриСозданииОбъекта(АгентКластера)

	Кластер_Агент = АгентКластера;

	ПараметрыОбъекта = Новый ПараметрыОбъекта("cluster");

	Элементы = Новый ОбъектыКластера(ЭтотОбъект);

КонецПроцедуры // ПриСозданииОбъекта()

// Процедура получает данные от сервиса администрирования кластера 1С
// и сохраняет в локальных переменных
//   
// Параметры:
//   ОбновитьПринудительно 		- Булево	- Истина - принудительно обновить данные (вызов RAC)
//											- Ложь - данные будут получены если истекло время актуальности
//													или данные не были получены ранее
//   
Процедура ОбновитьДанные(ОбновитьПринудительно = Ложь) Экспорт

	Если НЕ Элементы.ТребуетсяОбновление(ОбновитьПринудительно) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("list");

	Кластер_Агент.ВыполнитьКоманду(ПараметрыЗапуска);
	
	МассивРезультатов = Кластер_Агент.ВыводКоманды();

	МассивКластеров = Новый Массив();
	Для Каждого ТекОписание Из МассивРезультатов Цикл
		МассивКластеров.Добавить(Новый Кластер(Кластер_Агент, ТекОписание["cluster"]));
	КонецЦикла;

	Элементы.Заполнить(МассивКластеров);

	Элементы.УстановитьАктуальность();

КонецПроцедуры // ОбновитьДанные()

// Функция возвращает коллекцию параметров объекта
//   
// Параметры:
//   ИмяПоляКлюча 		- Строка	- имя поля, значение которого будет использовано
//									  в качестве ключа возвращаемого соответствия
//   
// Возвращаемое значение:
//	Соответствие - коллекция параметров объекта, для получения/изменения значений
//
Функция ПараметрыОбъекта(ИмяПоляКлюча = "ИмяПараметра") Экспорт

	Возврат ПараметрыОбъекта.Получить(ИмяПоляКлюча);

КонецФункции // ПараметрыОбъекта()

// Функция возвращает список кластеров
//   
// Параметры:
//   Отбор					 	- Структура	- Структура отбора кластеров (<поле>:<значение>)
//   ОбновитьПринудительно 		- Булево	- Истина - принудительно обновить данные (вызов RAC)
//
// Возвращаемое значение:
//	Массив - список кластеров 1С
//
Функция Список(Отбор = Неопределено, ОбновитьПринудительно = Ложь) Экспорт

	СписокКластеров = Элементы.Список(Отбор, ОбновитьПринудительно);
	
	Возврат СписокКластеров;

КонецФункции // Список()

// Функция возвращает список кластеров 1С
//   
// Параметры:
//   ПоляИерархии 			- Строка		- Поля для построения иерархии списка кластеров, разделенные ","
//   ОбновитьПринудительно 	- Булево		- Истина - обновить список (вызов RAC)
//
// Возвращаемое значение:
//	Соответствие - список кластеров 1С
//		<имя поля объекта>	- Массив(Соответствие), Соответствие	- список кластеров или следующий уровень
//
Функция ИерархическийСписок(Знач ПоляИерархии, ОбновитьПринудительно = Ложь) Экспорт

	СписокКластеров = Элементы.ИерархическийСписок(ПоляИерархии, ОбновитьПринудительно);
	
	Возврат СписокКластеров;

КонецФункции // ИерархическийСписок()

// Функция возвращает описание кластера 1С
//   
// Параметры:
//   Кластер	 			- Строка	- Адрес кластера в виде <сервер>:<порт>
//   ОбновитьПринудительно 	- Булево	- Истина - принудительно обновить данные (вызов RAC)
//
// Возвращаемое значение:
//	Соответствие - описание кластера 1С
//
Функция Получить(Знач Кластер, Знач ОбновитьПринудительно = Ложь) Экспорт

	АдресКластера = СтрРазделить(Кластер, ":");

	Если АдресКластера.Количество() = 1 Тогда
		ПортКластера = 1541;
		АдресКластера.Добавить(ПортКластера);
	КонецЕсли;

	Отбор = Новый Соответствие();
	Отбор.Вставить("host", АдресКластера[0]);
	Отбор.Вставить("port", АдресКластера[1]);

	СписокКластеров = Элементы.Список(Отбор, ОбновитьПринудительно);
	
	Если СписокКластеров.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СписокКластеров[0];

КонецФункции // Получить()

// Процедура добавляет новый кластер 1С
//   
// Параметры:
//   Имя			 	- Строка		- имя кластера 1С
//   АдресСервера	 	- Строка		- адрес сервера кластера 1С
//   ПортСервера	 	- Число			- порт сервера кластера 1С
//   ПараметрыКластера 	- Структура		- параметры кластера 1С
//
Процедура Добавить(Имя, АдресСервера = "localhost", ПортСервера = 1541, ПараметрыКластера = Неопределено) Экспорт

	Если НЕ ТипЗнч(ПараметрыКластера) = Тип("Структура") Тогда
		ПараметрыКластера = Новый Структура();
	КонецЕсли;

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("insert");

	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаАвторизации());

	ПараметрыЗапуска.Добавить(СтрШаблон("--host=%1", АдресСервера));
	ПараметрыЗапуска.Добавить(СтрШаблон("--port=%1", ПортСервера));
	ПараметрыЗапуска.Добавить(СтрШаблон("--name=%1", Имя));

	ВремПараметры = ПараметрыОбъекта();

	Для Каждого ТекЭлемент Из ВремПараметры Цикл
		ЗначениеПараметра = Служебный.ПолучитьЗначениеИзСтруктуры(ПараметрыКластера, ТекЭлемент.Ключ, 0);
		ПараметрыЗапуска.Добавить(СтрШаблон(ТекЭлемент.Значение.ПараметрКоманды + "=%1", ЗначениеПараметра));
	КонецЦикла;

	Кластер_Агент.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Лог.Информация(Кластер_Агент.ВыводКоманды());

	Элементы = Неопределено;

КонецПроцедуры // Добавить()

// Процедура удаляет кластер 1С
//   
// Параметры:
//   Имя			 	- Строка		- имя кластера 1С
//
Процедура Удалить(Имя) Экспорт
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("remove");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Получить(Имя).Ид()));

	ПараметрыЗапуска.Добавить(Получить(Имя).СтрокаАвторизации());
	
	Кластер_Агент.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Лог.Информация(Кластер_Агент.ВыводКоманды());

	Элементы = Неопределено;

КонецПроцедуры // Удалить()

Лог = Логирование.ПолучитьЛог("ktb.lib.irac");
