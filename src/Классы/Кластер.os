Перем Кластер_Ид; // cluster
Перем Кластер_Имя; // name
Перем Кластер_Сервер; // host
Перем Кластер_Порт; // port
Перем Кластер_Параметры;

Перем Кластер_Агент;
Перем Кластер_Администратор;
Перем Кластер_Администраторы;
Перем Кластер_Серверы;
Перем Кластер_Менеджеры;
Перем Кластер_Сеансы;
Перем Кластер_Соединения;
Перем Кластер_ИБ;
Перем Кластер_Профили;

Перем Лог;

// Конструктор
//   
// Параметры:
//   АгентКластера			- АгентКластера	- ссылка на родительский объект агента кластера
//   Ид						- Строка		- идентификатор кластера
//   Администратор			- Строка		- имя администратора кластера 1С
//   ПарольАдминистратора	- Строка		- пароль администратора кластера 1С
//
Процедура ПриСозданииОбъекта(АгентКластера, Ид, Администратор = "", ПарольАдминистратора = "")

	Если НЕ ЗначениеЗаполнено(Ид) Тогда
		Возврат;
	КонецЕсли;

	Кластер_Агент = АгентКластера;
	Кластер_Ид = Ид;
	
	Если ЗначениеЗаполнено(Администратор) Тогда
		Кластер_Администратор = Новый Структура("Администратор, Пароль", Администратор, ПарольАдминистратора);
	Иначе
		Кластер_Администратор = Неопределено;
	КонецЕсли;

	Кластер_Администраторы = Администраторы(Истина);

	ОбновитьДанные();

КонецПроцедуры // ПриСозданииОбъекта()

// Процедура получает данные от сервиса администрирования кластера 1С
// и сохраняет в локальных переменных
//   
Процедура ОбновитьДанные()

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("info");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид));

	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	МассивРезультатов = Служебный.РазобратьВыводКоманды(Служебный.ВыводКоманды());

	ТекОписание = МассивРезультатов[0];

	Кластер_Сервер = ТекОписание.Получить("host");
	Кластер_Порт = ТекОписание.Получить("port");
	Кластер_Имя = ТекОписание.Получить("name");

	Кластер_Параметры =
		Новый Структура("ИнтервалПерезапуска,
						|ДопустимыйОбъемПамяти,
						|ИнтервалПревышенияДопустимогоОбъемаПамяти,
						|ДопустимоеОтклонениеКоличестваОшибокСервера,
						|ПринудительноЗавершатьПроблемныеПроцессы,
						|ВыключенныеПроцессыОстанавливатьЧерез,
						|ЗащищенноеСоединение,
						|УровеньОтказоустойчивости,
						|РежимРаспределенияНагрузки",
						Служебный.ПолучитьЗначениеИзСтруктуры(ТекОписание, "lifetime-limit", 0),
						Служебный.ПолучитьЗначениеИзСтруктуры(ТекОписание, "max-memory-size", 0),
						Служебный.ПолучитьЗначениеИзСтруктуры(ТекОписание, "max-memory-time-limit", 0),
						Служебный.ПолучитьЗначениеИзСтруктуры(ТекОписание, "errors-count-threshold", 0),
						Служебный.ПолучитьЗначениеИзСтруктуры(ТекОписание, "kill-problem-processes", ДаНет.Нет),
						Служебный.ПолучитьЗначениеИзСтруктуры(ТекОписание, "expiration-timeout", 0),
						Служебный.ПолучитьЗначениеИзСтруктуры(ТекОписание, "security-level", 0),
						Служебный.ПолучитьЗначениеИзСтруктуры(ТекОписание, "session-fault-tolerance-level", 0),
						Служебный.ПолучитьЗначениеИзСтруктуры(ТекОписание, "load-balancing-mode", РежимыРаспределенияНагрузки.ПоПроизводительности));

КонецПроцедуры // ОбновитьДанные()

Функция СтрокаАвторизации() Экспорт
	
	Если НЕ ТипЗнч(Кластер_Администратор)  = Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;

	Если НЕ Кластер_Администратор.Свойство("Администратор") Тогда
		Возврат "";
	КонецЕсли;

	Лог.Отладка("Администратор " + Кластер_Администратор.Администратор);
	Лог.Отладка("Пароль <***>");

	СтрокаАвторизации = "";
	Если Не ПустаяСтрока(Кластер_Администратор.Администратор) Тогда
		СтрокаАвторизации = СтрШаблон("--cluster-user=%1 --cluster-pwd=%2",
									  Кластер_Администратор.Администратор,
									  Кластер_Администратор.Пароль);
	КонецЕсли;
			
	Возврат СтрокаАвторизации;
	
КонецФункции
	
Процедура УстановитьАдминистратора(Администратор, Пароль) Экспорт
	
	Кластер_Администратор = Новый Структура("Администратор, Пароль", Администратор, Пароль);
	
КонецПроцедуры
	
Функция Ид() Экспорт

	Возврат Кластер_Ид;

КонецФункции

Функция Имя() Экспорт

	Возврат Кластер_Имя;
	
КонецФункции

Функция Сервер() Экспорт
	
		Возврат Кластер_Сервер;
		
КонецФункции
	
Функция Порт() Экспорт
	
		Возврат Кластер_Порт;
		
КонецФункции
	
Функция Параметры() Экспорт
	
		Возврат Кластер_Параметры;
		
КонецФункции
	
Функция Администраторы(ОбновитьДанные = Ложь) Экспорт

	Если ОбновитьДанные Тогда
		Кластер_Администраторы = Новый АдминистраторыКластера(Кластер_Агент, ЭтотОбъект);
	КонецЕсли;

	Возврат Кластер_Администраторы;

КонецФункции

Функция Серверы(ОбновитьДанные = Ложь) Экспорт
	
	Если ОбновитьДанные Тогда
		Кластер_Серверы = Новый СерверыКластера(Кластер_Агент, ЭтотОбъект);
	КонецЕсли;
	
	Возврат Кластер_Серверы;
	
КонецФункции
	
Функция Менеджеры(ОбновитьДанные = Ложь) Экспорт
	
	Если ОбновитьДанные Тогда
		Кластер_Менеджеры = Новый МенеджерыКластера(Кластер_Агент, ЭтотОбъект);
	КонецЕсли;
	
	Возврат Кластер_Менеджеры;
	
КонецФункции
	
Функция Администратор() Экспорт
	Возврат Кластер_Администратор;
КонецФункции

Процедура Изменить(Знач Имя = "", Знач ПараметрыКластера = Неопределено) Экспорт

	Если НЕ ТипЗнч(ПараметрыКластера) = Тип("Структура") Тогда
		ПараметрыКластера = Новый Структура();
	КонецЕсли;

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("update");

	ПараметрыЗапуска.Добавить(Кластер_Агент.СтрокаАвторизации());

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид));

	Если ЗначениеЗаполнено(Имя) Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--name=%1", Имя));
	КонецЕсли;
	
	Если ПараметрыКластера.Свойство("ИнтервалПерезапуска") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--lifetime-limit=%1", ПараметрыКластера.ИнтервалПерезапуска));
	КонецЕсли;
	Если ПараметрыКластера.Свойство("ДопустимыйОбъемПамяти") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--max-memory-size=%1", ПараметрыКластера.ДопустимыйОбъемПамяти));
	КонецЕсли;
	Если ПараметрыКластера.Свойство("ИнтервалПревышенияДопустимогоОбъемаПамяти") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--max-memory-time-limit=%1",
											ПараметрыКластера.ИнтервалПревышенияДопустимогоОбъемаПамяти));
	КонецЕсли;
	Если ПараметрыКластера.Свойство("ДопустимоеОтклонениеКоличестваОшибокСервера") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--errors-count-threshold=%1",
											ПараметрыКластера.ДопустимоеОтклонениеКоличестваОшибокСервера));
	КонецЕсли;
	Если ПараметрыКластера.Свойство("ПринудительноЗавершатьПроблемныеПроцессы") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--kill-problem-processes=%1",
											ПараметрыКластера.ПринудительноЗавершатьПроблемныеПроцессы));
	КонецЕсли;
	Если ПараметрыКластера.Свойство("ВыключенныеПроцессыОстанавливатьЧерез") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--expiration-timeout=%1",
											ПараметрыКластера.ВыключенныеПроцессыОстанавливатьЧерез));
	КонецЕсли;
	Если ПараметрыКластера.Свойство("ЗащищенноеСоединение") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--security-level=%1", ПараметрыКластера.ЗащищенноеСоединение));
	КонецЕсли;
	Если ПараметрыКластера.Свойство("УровеньОтказоустойчивости") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--session-fault-tolerance-level=%1",
											ПараметрыКластера.УровеньОтказоустойчивости));
	КонецЕсли;
	Если ПараметрыКластера.Свойство("РежимРаспределенияНагрузки") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--load-balancing-mode=%1", ПараметрыКластера.РежимРаспределенияНагрузки));
	КонецЕсли;

	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Лог.Информация(Служебный.ВыводКоманды());

	ОбновитьДанные();

КонецПроцедуры

Лог = Логирование.ПолучитьЛог("ktb.lib.irac");
