Перем мАгент;
Перем мКластер;
Перем мЭлементы;
Перем Лог;

Процедура ПриСозданииОбъекта(АгентКластера, Кластер)

	мАгент = АгентКластера;
	мКластер = Кластер;

	ОбновитьДанные();

КонецПроцедуры

Функция ОбновитьДанные()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(мАгент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("server");
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", мКластер.Ид()));
	ПараметрыЗапуска.Добавить(мКластер.СтрокаАвторизации());

	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	МассивРезультатов = Служебный.РазобратьВыводКоманды(Служебный.ВыводКоманды());

	мЭлементы = Новый Соответствие();
	Для Каждого ТекОписание Из МассивРезультатов Цикл
		мЭлементы.Вставить(ТекОписание["name"], Новый Сервер(мАгент, мКластер, ТекОписание["server"]));
	КонецЦикла;

КонецФункции

Функция ПолучитьСписок(ОбновитьДанные = Ложь) Экспорт

	Если ОбновитьДанные Тогда
		ОбновитьДанные();
	КонецЕсли;

	Возврат мЭлементы;

КонецФункции

Функция Получить(Имя, ОбновитьДанные = Ложь) Экспорт

	Если ОбновитьДанные Тогда
		ОбновитьДанные();
	КонецЕсли;

	Возврат мЭлементы[Имя];

КонецФункции

Процедура Добавить(Имя, Сервер, Порт, ПараметрыКластера) Экспорт

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(мАгент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("insert");

	ПараметрыЗапуска.Добавить(мАгент.СтрокаАвторизации());

	ПараметрыЗапуска.Добавить(СтрШаблон("--host=%1", Сервер));
	ПараметрыЗапуска.Добавить(СтрШаблон("--port=%1", Порт));
	ПараметрыЗапуска.Добавить(СтрШаблон("--name=%1", Имя));

	Если ПараметрыКластера.Свойство("ИнтервалПерезапуска") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--lifetime-limit=%1", ПараметрыКластера.ИнтервалПерезапуска));
	КонецЕсли;
	Если ПараметрыКластера.Свойство("ДопустимыйОбъемПамяти") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--max-memory-size=%1", ПараметрыКластера.ДопустимыйОбъемПамяти));
	КонецЕсли;
	Если ПараметрыКластера.Свойство("ИнтервалПревышенияДопустимогоОбъемаПамяти") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--max-memory-time-limit=%1", ПараметрыКластера.ИнтервалПревышенияДопустимогоОбъемаПамяти));
	КонецЕсли;
	Если ПараметрыКластера.Свойство("ДопустимоеОтклонениеКоличестваОшибокСервера") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--errors-count-threshold=%1", ПараметрыКластера.ДопустимоеОтклонениеКоличестваОшибокСервера));
	КонецЕсли;
	Если ПараметрыКластера.Свойство("ПринудительноЗавершатьПроблемныеПроцессы") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--kill-problem-processes=%1", ПараметрыКластера.ПринудительноЗавершатьПроблемныеПроцессы));
	КонецЕсли;
	Если ПараметрыКластера.Свойство("ВыключенныеПроцессыОстанавливатьЧерез") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--expiration-timeout=%1", ПараметрыКластера.ВыключенныеПроцессыОстанавливатьЧерез));
	КонецЕсли;
	Если ПараметрыКластера.Свойство("ЗащищенноеСоединение") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--security-level=%1", ПараметрыКластера.ЗащищенноеСоединение));
	КонецЕсли;
	Если ПараметрыКластера.Свойство("УровеньОтказоустойчивости") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--session-fault-tolerance-level=%1", ПараметрыКластера.УровеньОтказоустойчивости));
	КонецЕсли;
	Если ПараметрыКластера.Свойство("РежимРаспределенияНагрузки") Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("--load-balancing-mode=%1", ПараметрыКластера.РежимРаспределенияНагрузки));
	КонецЕсли;

	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Лог.Информация(Служебный.ВыводКоманды());

	ОбновитьДанные();

КонецПроцедуры

Процедура Удалить(Имя, АдминистраторКластера) Экспорт
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(мАгент.СтрокаПодключения());

	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("remove");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Получить(Имя).Ид()));

	ПараметрыЗапуска.Добавить(Получить(Имя).СтрокаАвторизации());
	
	Служебный.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Лог.Информация(Служебный.ВыводКоманды());

	ОбновитьДанные();

КонецПроцедуры

Лог = Логирование.ПолучитьЛог("ktb.lib.irac");
