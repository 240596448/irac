#Использовать "../src"
#Использовать asserts
#Использовать fs
#Использовать tempfiles
#Использовать moskito

Перем ЮнитТест;
Перем АгентКластера;
Перем МокИсполнительКоманд;
Перем ВременныйКаталог;

// Процедура выполняется после запуска теста
//
Процедура ПередЗапускомТеста() Экспорт
	
	АдресСервера = "localhost";
	ПортСервера = 1545;

	Если АгентКластера = Неопределено Тогда
		АгентКластера = Новый АдминистрированиеКластера(АдресСервера, ПортСервера, "");
	КонецЕсли;	

	Если МокИсполнительКоманд = Неопределено Тогда
		МокИсполнительКоманд = Мок.Получить(Новый ИсполнительКоманд(""));
	КонецЕсли;

	АгентКластера.УстановитьИсполнительКоманд(МокИсполнительКоманд);
	
	Лог = Логирование.ПолучитьЛог("ktb.lib.irac");
	Лог.УстановитьУровень(УровниЛога.Отладка);

КонецПроцедуры // ПередЗапускомТеста()

// Функция возвращает список тестов для выполнения
//
// Параметры:
//	Тестирование	- Тестер		- Объект Тестер (1testrunner)
//	
// Возвращаемое значение:
//	Массив		- Массив имен процедур-тестов
//	
Функция ПолучитьСписокТестов(Тестирование) Экспорт
	
	ЮнитТест = Тестирование;
	
	СписокТестов = Новый Массив;
	СписокТестов.Добавить("ТестДолжен_ПодключитьсяКСерверуАдминистрирования");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокКластеров");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокМенеджеров");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокСерверовКластера");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокРабочихПроцессов");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокЛицензийПроцесса");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокСервисов");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокБазНаСервере");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокСеансовКластера");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокЛицензийСеанса");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокСоединенийКластера");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокНазначенийФункциональностиСервера");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокПрофилейБезопасностиКластера");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокКаталоговПрофиля");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокCOMКлассовПрофиля");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокКомпонентПрофиля");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокМодулейПрофиля");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокПриложенийПрофиля");
	СписокТестов.Добавить("ТестДолжен_ПолучитьСписокИнтернетРесурсовПрофиля");
	СписокТестов.Добавить("ТестДолжен_ОказатьсяНеРеализованным");

	Возврат СписокТестов;
	
КонецФункции // ПолучитьСписокТестов()

// Процедура выполняется после запуска теста
//
Процедура ПослеЗапускаТеста() Экспорт

	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда

		Утверждения.ПроверитьИстину(НайтиФайлы(ВременныйКаталог, "*").Количество() = 0,
			"Во временном каталоге " + ВременныйКаталог + " не должно остаться файлов");
	
		ВременныеФайлы.УдалитьФайл(ВременныйКаталог);

		Утверждения.ПроверитьИстину(Не ФС.КаталогСуществует(ВременныйКаталог), "Временный каталог должен быть удален");

		ВременныйКаталог = "";

	КонецЕсли;

КонецПроцедуры // ПослеЗапускаТеста()

Процедура УстановитьВыводИсполнителяКоманд(ИсполнительКоманд, ПараметрыКоманды, ВыводКоманды)

	ИсполнительКоманд.Когда().ВыполнитьКоманду(ПараметрыКоманды).ТогдаВозвращает(ВыводКоманды);

КонецПроцедуры

// Процедура - тест
//
Процедура ТестДолжен_ПодключитьсяКСерверуАдминистрирования() Экспорт
	
	СтрокаПроверки = "localhost:1545";
	ДлинаСтроки = СтрДлина(СтрокаПроверки);

	Утверждения.ПроверитьРавенство(Лев(АгентКластера.ОписаниеПодключения(), ДлинаСтроки), СтрокаПроверки);

КонецПроцедуры // ТестДолжен_ПодключитьсяКСерверуАдминистрирования()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокКластеров() Экспорт
    
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(АгентКластера.СтрокаПодключения());
	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("list");
	
	ВыводКоманды = "cluster                       : 6d6958ed-a96c-4999-a995-698a0298161e
					|host                          : Sport1
					|port                          : 1541
					|name                          : ""Локальный кластер""
					|expiration-timeout            : 0
					|lifetime-limit                : 0
					|max-memory-size               : 0
					|max-memory-time-limit         : 0
					|security-level                : 0
					|session-fault-tolerance-level : 0
					|load-balancing-mode           : performance
					|errors-count-threshold        : 0
					|kill-problem-processes        : 0
					|
					|";
	
	УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), ПараметрыЗапуска, ВыводКоманды);
	
	Кластеры = АгентКластера.Кластеры().Список();

	Утверждения.ПроверитьБольше(Кластеры.Количество(), 0, "Не удалось получить список кластеров");

КонецПроцедуры // ТестДолжен_ПолучитьСписокКластеров()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокМенеджеров() Экспорт
    
	Кластеры = АгентКластера.Кластеры().Список();

	Для Каждого Кластер Из Кластеры Цикл
		ПараметрыЗапуска = Новый Массив();
		ПараметрыЗапуска.Добавить(АгентКластера.СтрокаПодключения());
	
		ПараметрыЗапуска.Добавить("manager");
		ПараметрыЗапуска.Добавить("list");
	
		ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер.Ид()));
		ПараметрыЗапуска.Добавить(Кластер.СтрокаАвторизации());

		ВыводКоманды = "manager : 0e588a25-8354-4344-b935-53442312aa30
						|pid     : 3388
						|using   : normal
						|host    : Sport1
						|port    : 1541
						|descr   : ""Главный менеджер кластера""
						|
						|";

		УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), ПараметрыЗапуска, ВыводКоманды);
	
		Менеджеры = Кластер.Менеджеры().Список();
		Прервать;
	КонецЦикла;

	Утверждения.ПроверитьБольше(Менеджеры.Количество(), 0, "Не удалось получить список менеджеров");

КонецПроцедуры // ТестДолжен_ПолучитьСписокМенеджеров()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокСерверовКластера() Экспорт
	
	Кластеры = АгентКластера.Кластеры().Список();
	
	Для Каждого Кластер Из Кластеры Цикл
		ПараметрыЗапуска = Новый Массив();
		ПараметрыЗапуска.Добавить(АгентКластера.СтрокаПодключения());
	
		ПараметрыЗапуска.Добавить("server");
		ПараметрыЗапуска.Добавить("list");
	
		ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер.Ид()));
		ПараметрыЗапуска.Добавить(Кластер.СтрокаАвторизации());

		ВыводКоманды = "server                              : 48336b15-d0e0-4c1e-9e9c-49fabfbd0ab5
						|agent-host                          : Sport1
						|agent-port                          : 1540
						|port-range                          : 1560:1591
						|name                                : ""Центральный сервер""
						|using                               : main
						|dedicate-managers                   : none
						|infobases-limit                     : 8
						|memory-limit                        : 0
						|connections-limit                   : 128
						|safe-working-processes-memory-limit : 0
						|safe-call-memory-limit              : 0
						|cluster-port                        : 1541
						|
						|";

		УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), ПараметрыЗапуска, ВыводКоманды);
	
		Серверы = Кластер.Серверы().Список();
		Прервать;
	КонецЦикла;

	Утверждения.ПроверитьБольше(Серверы.Количество(), 0, "Не удалось получить список серверов кластера");
	
КонецПроцедуры // ТестДолжен_ПолучитьСписокСерверовКластера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокРабочихПроцессов() Экспорт
	
	Кластеры = АгентКластера.Кластеры().Список();
	
	Для Каждого Кластер Из Кластеры Цикл
		ПараметрыЗапуска = Новый Массив();
		ПараметрыЗапуска.Добавить(АгентКластера.СтрокаПодключения());
	
		ПараметрыЗапуска.Добавить("process");
		ПараметрыЗапуска.Добавить("list");
	
		ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер.Ид()));
		ПараметрыЗапуска.Добавить(Кластер.СтрокаАвторизации());

		ВыводКоманды = "process              : 3ea9968d-159c-4b5f-9bdc-22b8ead96f74
						|host                 : Sport1
						|port                 : 1564
						|pid                  : 5428
						|is-enable            : yes
						|running              : yes
						|started-at           : 2018-03-29T11:16:02
						|use                  : used
						|available-perfomance : 100
						|capacity             : 1000
						|connections          : 7
						|memory-size          : 1518604
						|memory-excess-time   : 0
						|selection-size       : 61341
						|avg-back-call-time   : 0.000
						|avg-call-time        : 0.483
						|avg-db-call-time     : 0.124
						|avg-lock-call-time   : 0.000
						|avg-server-call-time : -0.265
						|avg-threads          : 0.281
						|
						|process              : 1af2e54f-d95a-4370-9b45-8277280cad23
						|host                 : Sport1
						|port                 : 1561
						|pid                  : 7856
						|is-enable            : yes
						|running              : yes
						|started-at           : 2018-04-03T18:42:45
						|use                  : used
						|available-perfomance : 100
						|capacity             : 1000
						|connections          : 19
						|memory-size          : 4598160
						|memory-excess-time   : 0
						|selection-size       : 169046
						|avg-back-call-time   : 0.000
						|avg-call-time        : 0.731
						|avg-db-call-time     : 0.140
						|avg-lock-call-time   : 0.000
						|avg-server-call-time : 0.133
						|avg-threads          : 2.088
						|
						|";

		УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), ПараметрыЗапуска, ВыводКоманды);
	
		Процессы = Кластер.РабочиеПроцессы().Список();
		Прервать;
	КонецЦикла;

	Утверждения.ПроверитьБольше(Процессы.Количество(), 0, "Не удалось получить список рабочих процессов");
	
КонецПроцедуры // ТестДолжен_ПолучитьСписокРабочихПроцессов()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокЛицензийПроцесса() Экспорт
	
	АгентКластера.УстановитьИсполнительКоманд(Новый ИсполнительКоманд());

	Кластеры = АгентКластера.Кластеры().Список();
	
	Для Каждого Кластер Из Кластеры Цикл
		Процессы = Кластер.РабочиеПроцессы().Список();
		Прервать;
	КонецЦикла;

	Для Каждого Процесс Из Процессы Цикл
		Лицензии = Процесс.Лицензии().Список();
		Прервать;
	КонецЦикла;

	Утверждения.ПроверитьБольше(Лицензии.Количество(), 0, "Не удалось получить список лицензий рабочего процесса");
	
КонецПроцедуры // ТестДолжен_ПолучитьСписокРабочихПроцессов()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокСервисов() Экспорт
	
	Кластеры = АгентКластера.Кластеры().Список();
	
	Для Каждого Кластер Из Кластеры Цикл
		ПараметрыЗапуска = Новый Массив();
		ПараметрыЗапуска.Добавить(АгентКластера.СтрокаПодключения());
	
		ПараметрыЗапуска.Добавить("service");
		ПараметрыЗапуска.Добавить("list");
	
		ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер.Ид()));
		ПараметрыЗапуска.Добавить(Кластер.СтрокаАвторизации());

		ВыводКоманды = "name      : LicenseService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис лицензирования""
						|
						|name      : EventLogService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис журналов регистрации""
						|
						|name      : OpenID2ProviderContextService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис провайдера OpenID2""
						|
						|name      : TimestampService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис времени""
						|
						|name      : SessionReuseService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис повторного использования сеансов""
						|
						|name      : SessionDataService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис сеансовых данных""
						|
						|name      : ExternalSessionManagerService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис внешнего управления сеансами""
						|
						|name      : FulltextSearchService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис полнотекстового поиска""
						|
						|name      : TransactionLockService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис транзакционных блокировок""
						|
						|name      : DebugService
						|main-only : 1
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис управления предметами отладки (TCP)""
						|
						|name      : ClusterConfigService
						|main-only : 1
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис конфигурации кластера""
						|
						|name      : ClientTestingService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис тестирования""
						|
						|name      : ClusterLockService
						|main-only : 1
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис блокировок кластера""
						|
						|name      : JobService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис заданий""
						|
						|name      : ExternalDataSourceXMLAService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис работы с внешними источниками данных через XMLA""
						|
						|name      : SettingsService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис пользовательских настроек""
						|
						|name      : ExternalDataSourceODBCService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис работы с внешними источниками данных через ODBC""
						|
						|name      : NumerationService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис нумерации""
						|
						|name      : DataEditLockService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис блокировки объектов""
						|
						|name      : AuxiliaryService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис вспомогательных функций кластера""
						|
						|name      : DataBaseConfigurationUpdateService
						|main-only : 0
						|manager   : 0e588a25-8354-4344-b935-53442312aa30
						|descr     : ""Сервис обновления конфигурации базы данных""
						|		
						|";

		УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), ПараметрыЗапуска, ВыводКоманды);
	
		Сервисы = Кластер.Сервисы().Список();
		Прервать;
	КонецЦикла;

	Утверждения.ПроверитьБольше(Сервисы.Количество(), 0, "Не удалось получить список сервисов");
	
КонецПроцедуры // ТестДолжен_ПолучитьСписокСервисов()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокБазНаСервере() Экспорт
    
	Кластеры = АгентКластера.Кластеры().Список();
	
	Для Каждого Кластер Из Кластеры Цикл
		ПараметрыЗапуска = Новый Массив();
		ПараметрыЗапуска.Добавить(АгентКластера.СтрокаПодключения());
	
		ПараметрыЗапуска.Добавить("infobase");
		ПараметрыЗапуска.Добавить("summary");
		ПараметрыЗапуска.Добавить("list");
	
		ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер.Ид()));
		ПараметрыЗапуска.Добавить(Кластер.СтрокаАвторизации());

		ВыводКоманды = "infobase : feba16a9-3bb0-4fc9-b940-0f1ab933c539
						|name     : DEV_User1_ACC_Cust1
						|descr    : 
						|
						|infobase : aea71760-15b3-485a-9a35-506eb8a0b04a
						|name     : DEV_User1_TRADE_Cust1
						|descr    : 
						|
						|infobase : 7e468bc0-01f3-45d1-bed5-d5ec344aefb3
						|name     : DEV_User1_ACC_Cust2
						|descr    : 
						|
						|infobase : 76e63eea-c3d8-48d7-8e3c-ba80aaedbce9
						|name     : DEV_User2_TRADE_Cust2
						|descr    : 
						|
						|infobase : d8ee553b-9701-4d65-b385-599eaf1b3a54
						|name     : DEV_User3_ACC_Cust1
						|descr    : 
						|
						|";

		УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), ПараметрыЗапуска, ВыводКоманды);
	
		ИБ = Кластер.ИнформационныеБазы().Список();
		Прервать;
	КонецЦикла;
	
	Утверждения.ПроверитьБольше(ИБ.Количество(), 0, "Не удалось получить список информационных баз");

КонецПроцедуры // ТестДолжен_ПолучитьСписокБазНаСервере()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокСеансовКластера() Экспорт
    
	АгентКластера.УстановитьИсполнительКоманд(Новый ИсполнительКоманд());

	Кластеры = АгентКластера.Кластеры().Список();
	
	Для Каждого Кластер Из Кластеры Цикл
		Сеансы = Кластер.Сеансы().Список();
		Прервать;
	КонецЦикла;
	
	Утверждения.ПроверитьБольше(Сеансы.Количество(), 0, "Не удалось получить список сеансов");

КонецПроцедуры // ТестДолжен_ПолучитьСписокСеансовКластера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокЛицензийСеанса() Экспорт
	
	АгентКластера.УстановитьИсполнительКоманд(Новый ИсполнительКоманд());

	Кластеры = АгентКластера.Кластеры().Список();
	
	Для Каждого Кластер Из Кластеры Цикл
		Сеансы = Кластер.Сеансы().Список();
		Прервать;
	КонецЦикла;

	Для Каждого Сеанс Из Сеансы Цикл
		Лицензии = Сеанс.Лицензии().Список();
		Прервать;
	КонецЦикла;

	Утверждения.ПроверитьБольше(Лицензии.Количество(), 0, "Не удалось получить список лицензий сеанса");
	
КонецПроцедуры // ТестДолжен_ПолучитьСписокЛицензийСеанса()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокСоединенийКластера() Экспорт
    
	АгентКластера.УстановитьИсполнительКоманд(Новый ИсполнительКоманд());

	Кластеры = АгентКластера.Кластеры().Список();
	
	Для Каждого Кластер Из Кластеры Цикл
		Соединения = Кластер.Соединения().Список();
		Прервать;
	КонецЦикла;
	
	Утверждения.ПроверитьБольше(Соединения.Количество(), 0, "Не удалось получить список соединений");

КонецПроцедуры // ТестДолжен_ПолучитьСписокСоединенийКластера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокНазначенийФункциональностиСервера() Экспорт
	
	Кластеры = АгентКластера.Кластеры().Список();
	
	Для Каждого Кластер Из Кластеры Цикл
		ПараметрыЗапуска = Новый Массив();
		ПараметрыЗапуска.Добавить(АгентКластера.СтрокаПодключения());
	
		ПараметрыЗапуска.Добавить("server");
		ПараметрыЗапуска.Добавить("list");
	
		ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер.Ид()));
		ПараметрыЗапуска.Добавить(Кластер.СтрокаАвторизации());

		ВыводКоманды = "server                              : 48336b15-d0e0-4c1e-9e9c-49fabfbd0ab5
						|agent-host                          : Sport1
						|agent-port                          : 1540
						|port-range                          : 1560:1591
						|name                                : ""Центральный сервер""
						|using                               : main
						|dedicate-managers                   : none
						|infobases-limit                     : 8
						|memory-limit                        : 0
						|connections-limit                   : 128
						|safe-working-processes-memory-limit : 0
						|safe-call-memory-limit              : 0
						|cluster-port                        : 1541
						|
						|";

		УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), ПараметрыЗапуска, ВыводКоманды);
	
		Серверы = Кластер.Серверы().Список();
		Прервать;
	КонецЦикла;

	Для Каждого Сервер Из Серверы Цикл
		ПараметрыЗапуска = Новый Массив();
		ПараметрыЗапуска.Добавить(АгентКластера.СтрокаПодключения());

		ПараметрыЗапуска.Добавить("server");
		ПараметрыЗапуска.Добавить("info");

		ПараметрыЗапуска.Добавить(СтрШаблон("--server=%1", Сервер.Ид()));
		ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер.Ид()));
		ПараметрыЗапуска.Добавить(Кластер.СтрокаАвторизации());

		ВыводКоманды = "server                              : 48336b15-d0e0-4c1e-9e9c-49fabfbd0ab5
						|agent-host                          : Sport1
						|agent-port                          : 1540
						|port-range                          : 1560:1591
						|name                                : ""Центральный сервер""
						|using                               : main
						|dedicate-managers                   : none
						|infobases-limit                     : 8
						|memory-limit                        : 0
						|connections-limit                   : 128
						|safe-working-processes-memory-limit : 0
						|safe-call-memory-limit              : 0
						|cluster-port                        : 1541
						|
						|";

		УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), ПараметрыЗапуска, ВыводКоманды);
	
		ПараметрыЗапуска = Новый Массив();
		ПараметрыЗапуска.Добавить(АгентКластера.СтрокаПодключения());
	
		ПараметрыЗапуска.Добавить("rule");
		ПараметрыЗапуска.Добавить("list");
	
		ПараметрыЗапуска.Добавить(СтрШаблон("--server=%1", Сервер.Ид()));
		ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер.Ид()));
		ПараметрыЗапуска.Добавить(Кластер.СтрокаАвторизации());

		ВыводКоманды = "rule            : 2aae9067-8fff-4aa7-a87b-e9c354879029
						|object-type     : ""Connection""
						|infobase-name   : DEV_User1_TRADE_Cust1
						|rule-type       : always
						|application-ext : 
						|priority        : 0
						|
						|rule            : 269f9796-a3fa-4370-ae56-558a5d00d6c0
						|object-type     : 
						|infobase-name   : DEV_User2_TRADE_Cust2
						|rule-type       : auto
						|application-ext : BacgroundJob
						|priority        : 0
						|
						|";

		УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), ПараметрыЗапуска, ВыводКоманды);
	
		НазначенияФункциональности = Сервер.НазначенияФункциональности().Список();
		Прервать;
	КонецЦикла;

	Утверждения.ПроверитьБольше(НазначенияФункциональности.Количество(), 0,
								"Не удалось получить список назначений функциональности");
	
КонецПроцедуры // ТестДолжен_ПолучитьСписокНазначенийФункциональностиСервера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокПрофилейБезопасностиКластера() Экспорт
    
	Кластеры = АгентКластера.Кластеры().Список();
	
	Для Каждого Кластер Из Кластеры Цикл
		ПараметрыЗапуска = Новый Массив();
		ПараметрыЗапуска.Добавить(АгентКластера.СтрокаПодключения());
	
		ПараметрыЗапуска.Добавить("profile");
		ПараметрыЗапуска.Добавить("list");
	
		ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер.Ид()));
		ПараметрыЗапуска.Добавить(Кластер.СтрокаАвторизации());

		ВыводКоманды = "name                                : ОсновнойПрофиль
						|descr                               : Основной профиль безопасности
						|config                              : no
						|priv                                : no
						|directory                           : list
						|com                                 : list
						|addin                               : list
						|module                              : list
						|app                                 : list
						|inet                                : list
						|crypto                              : no
						|right-extension                     : no
						|right-extension-definition-roles    : 
						|all-modules-extension               : no
						|modules-available-for-extension     : 
						|modules-not-available-for-extension : 
						|
						|";

		УстановитьВыводИсполнителяКоманд(АгентКластера.ИсполнительКоманд(), ПараметрыЗапуска, ВыводКоманды);
	
		Профили = Кластер.ПрофилиБезопасности().Список();
		Прервать;
	КонецЦикла;
	
	Утверждения.ПроверитьБольше(Профили.Количество(), 0, "Не удалось получить список профилей безопасности");

КонецПроцедуры // ТестДолжен_ПолучитьСписокПрофилейБезопасностиКластера()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокКаталоговПрофиля() Экспорт
    
	//АгентКластера.УстановитьИсполнительКоманд(Новый ИсполнительКоманд());

	Кластеры = АгентКластера.Кластеры().Список();
	
	Для Каждого Кластер Из Кластеры Цикл
		Профили = Кластер.ПрофилиБезопасности().Список(, Истина);
		Прервать;
	КонецЦикла;
	
	Для Каждого Профиль Из Профили Цикл
		Каталоги = Профиль.Каталоги().Список();
		Прервать;
	КонецЦикла;
	
	Утверждения.ПроверитьБольше(Каталоги.Количество(), 0, "Не удалось получить список каталогов профилей безопасности");

КонецПроцедуры // ТестДолжен_ПолучитьСписокКаталоговПрофиля()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокCOMКлассовПрофиля() Экспорт
    
	АгентКластера.УстановитьИсполнительКоманд(Новый ИсполнительКоманд());

	Кластеры = АгентКластера.Кластеры().Список();
	
	Для Каждого Кластер Из Кластеры Цикл
		Профили = Кластер.ПрофилиБезопасности().Список(, Истина);
		Прервать;
	КонецЦикла;
	
	Для Каждого Профиль Из Профили Цикл
		Каталоги = Профиль.COMКлассы().Список();
		Прервать;
	КонецЦикла;
	
	Утверждения.ПроверитьБольше(Каталоги.Количество(), 0, "Не удалось получить список COM-классов профилей безопасности");

КонецПроцедуры // ТестДолжен_ПолучитьСписокCOMКлассовПрофиля()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокКомпонентПрофиля() Экспорт
    
	АгентКластера.УстановитьИсполнительКоманд(Новый ИсполнительКоманд());

	Кластеры = АгентКластера.Кластеры().Список();
	
	Для Каждого Кластер Из Кластеры Цикл
		Профили = Кластер.ПрофилиБезопасности().Список(, Истина);
		Прервать;
	КонецЦикла;
	
	Для Каждого Профиль Из Профили Цикл
		Каталоги = Профиль.ВнешниеКомпоненты().Список();
		Прервать;
	КонецЦикла;
	
	Утверждения.ПроверитьБольше(Каталоги.Количество(), 0, "Не удалось получить список внешних компонент профилей безопасности");

КонецПроцедуры // ТестДолжен_ПолучитьСписокКомпонентПрофиля()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокМодулейПрофиля() Экспорт
    
	АгентКластера.УстановитьИсполнительКоманд(Новый ИсполнительКоманд());

	Кластеры = АгентКластера.Кластеры().Список();
	
	Для Каждого Кластер Из Кластеры Цикл
		Профили = Кластер.ПрофилиБезопасности().Список(, Истина);
		Прервать;
	КонецЦикла;
	
	Для Каждого Профиль Из Профили Цикл
		Каталоги = Профиль.ВнешниеМодули().Список();
		Прервать;
	КонецЦикла;
	
	Утверждения.ПроверитьБольше(Каталоги.Количество(), 0, "Не удалось получить список внешних модулей профилей безопасности");

КонецПроцедуры // ТестДолжен_ПолучитьСписокМодулейПрофиля()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокПриложенийПрофиля() Экспорт
    
	АгентКластера.УстановитьИсполнительКоманд(Новый ИсполнительКоманд());

	Кластеры = АгентКластера.Кластеры().Список();
	
	Для Каждого Кластер Из Кластеры Цикл
		Профили = Кластер.ПрофилиБезопасности().Список(, Истина);
		Прервать;
	КонецЦикла;
	
	Для Каждого Профиль Из Профили Цикл
		Каталоги = Профиль.Приложения().Список();
		Прервать;
	КонецЦикла;
	
	Утверждения.ПроверитьБольше(Каталоги.Количество(), 0, "Не удалось получить список приложений профилей безопасности");

КонецПроцедуры // ТестДолжен_ПолучитьСписокПриложенийПрофиля()

// Процедура - тест
//
Процедура ТестДолжен_ПолучитьСписокИнтернетРесурсовПрофиля() Экспорт
    
	АгентКластера.УстановитьИсполнительКоманд(Новый ИсполнительКоманд());

	Кластеры = АгентКластера.Кластеры().Список();
	
	Для Каждого Кластер Из Кластеры Цикл
		Профили = Кластер.ПрофилиБезопасности().Список(, Истина);
		Прервать;
	КонецЦикла;
	
	Для Каждого Профиль Из Профили Цикл
		Каталоги = Профиль.ИнтернетРесурсы().Список();
		Прервать;
	КонецЦикла;
	
	Утверждения.ПроверитьБольше(Каталоги.Количество(), 0, "Не удалось получить список интернет ресурсов профилей безопасности");

КонецПроцедуры // ТестДолжен_ПолучитьСписокИнтернетРесурсовПрофиля()

