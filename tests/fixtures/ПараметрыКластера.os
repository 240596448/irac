Перем ПараметрыКластера;
Перем ВозвращаемыеЗначения;
Перем Лог;

// Процедура устанавливает вывод функции ВыполнитьКоманду мок-исполнителя команд
//
// Параметры:
//	ИсполнительКоманд	- МокИсполнительКоманд		- мок-объект исполнитель команд
//	ПутьКДанным			- Строка					- Путь к параметрам в структуре параметров кластера
//	
Процедура УстановитьВыводИсполнителяКоманд(ИсполнительКоманд, ПутьКДанным) Экспорт

	МассивПутей = СтрРазделить(ПутьКДанным, ".");

	Данные = ПараметрыКластера;

	Для Каждого ТекПуть Из МассивПутей Цикл
		Данные = Данные[ТекПуть];
	КонецЦикла;

	ДанныеДляОбработки = Новый Массив();
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		ДанныеДляОбработки = Данные;
	Иначе
		ДанныеДляОбработки.Добавить(Данные);
	КонецЕсли;

	Для Каждого ТекДанные Из ДанныеДляОбработки Цикл
		ИсполнительКоманд.Когда().ВыполнитьКоманду(ТекДанные.ПараметрыКоманды).ТогдаВозвращает(ТекДанные.ВыводКоманды);
	КонецЦикла;

КонецПроцедуры // УстановитьВыводИсполнителяКомандНов()

Функция Агент_СтрокаПодключения()

	Возврат "localhost:1545";

КонецФункции // Агент_СтрокаПодключения()

Функция Кластер_Ид()

	Кластеры = РазобратьВыводКоманды(ВозвращаемыеЗначения["Кластеры"]);

	Возврат Кластеры[0]["cluster"];

КонецФункции // Кластер_Ид()

Функция Агент_СтрокаАвторизации()

	СтрокаАвторизации = СтрШаблон("--agent-user=%1 --agent-pwd=%2",
									"""mainadmin""",
									"123");
	Возврат СтрокаАвторизации;

КонецФункции // Кластер_СтрокаАвторизации()

Функция Кластер_СтрокаАвторизации()

	СтрокаАвторизации = СтрШаблон("--cluster-user=%1 --cluster-pwd=%2",
									"""clusteradmin""",
									"123");
	Возврат СтрокаАвторизации;

КонецФункции // Кластер_СтрокаАвторизации()

Функция Сервер_Ид()

	Серверы = РазобратьВыводКоманды(ВозвращаемыеЗначения["Серверы"]);

	Возврат Серверы[0]["server"];

КонецФункции // Сервер_Ид()

Функция ПрофильБезопасности_Имя()

	Профиль = РазобратьВыводКоманды(ВозвращаемыеЗначения["ПрофилиБезопасности"]);

	Возврат Профиль[0]["name"];

КонецФункции // ПрофильБезопасности_Имя()

Функция ИБ_СтрокаАвторизации()

	СтрокаАвторизации = СтрШаблон("--infobase-user=%1 --infobase-pwd=%2",
									"""Пользователь И. Б.""",
									"123");
	Возврат СтрокаАвторизации;

КонецФункции // ИБ_СтрокаАвторизации()

Функция Вывод_АдминистраторыСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());
	ПараметрыЗапуска.Добавить("agent");
	ПараметрыЗапуска.Добавить("admin");
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(Агент_СтрокаАвторизации());
	
	ВыводКоманды = ВозвращаемыеЗначения["Администраторы"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_АдминистраторыСписок()

Функция Вывод_КластерыСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());
	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("list");
	
	ВыводКоманды = ВозвращаемыеЗначения["Кластеры"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_КластерыСписок()

Функция Вывод_КластерыПараметры()
	
	Результат = Новый Массив();

	Кластеры = РазобратьВыводКоманды(ВозвращаемыеЗначения["Кластеры"]);

	Для Каждого ТекКластер Из Кластеры Цикл

		ПараметрыЗапуска = Новый Массив();
		ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());
		ПараметрыЗапуска.Добавить("cluster");
		ПараметрыЗапуска.Добавить("info");
		
		ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", ТекКластер["cluster"]));
		
		ВыводКоманды = ТекКластер["ТекстОбъекта"];

		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды));

	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_КластерыПараметры()

Функция Вывод_КластерыАдминистраторыСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());
	ПараметрыЗапуска.Добавить("cluster");
	ПараметрыЗапуска.Добавить("admin");
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());
	
	ВыводКоманды = ВозвращаемыеЗначения["Кластеры.Администраторы"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_КластерыАдминистраторыСписок()

Функция Вывод_МенеджерыСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("manager");
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["Менеджеры"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_МенеджерыСписок()

Функция Вывод_СерверыСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("server");
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["Серверы"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_СерверыСписок()

Функция Вывод_СерверыПараметры()
	
	Результат = Новый Массив();

	Серверы = РазобратьВыводКоманды(ВозвращаемыеЗначения["Серверы"]);

	Для Каждого ТекСервер Из Серверы Цикл

		ПараметрыЗапуска = Новый Массив();
		ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());
		
		ПараметрыЗапуска.Добавить("server");
		ПараметрыЗапуска.Добавить("info");
		
		ПараметрыЗапуска.Добавить(СтрШаблон("--server=%1", ТекСервер["server"]));

		ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
		ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());
		
		ВыводКоманды = ТекСервер["ТекстОбъекта"];

		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды));

	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_СерверыПараметры()

Функция Вывод_РабочиеПроцессыСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("process");
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["РабочиеПроцессы"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_РабочиеПроцессыСписок()

Функция Вывод_РабочиеПроцессыПараметры()
	
	Процессы = РазобратьВыводКоманды(ВозвращаемыеЗначения["РабочиеПроцессы"]);

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("process");
	ПараметрыЗапуска.Добавить("info");

	ПараметрыЗапуска.Добавить(СтрШаблон("--process=%1", Процессы[0]["process"]));

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = Процессы[0]["ТекстОбъекта"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_РабочиеПроцессыПараметры()

Функция Вывод_РабочиеПроцессыЛицензииСписок()
	
	Процессы = РазобратьВыводКоманды(ВозвращаемыеЗначения["РабочиеПроцессы"]);

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("process");
	ПараметрыЗапуска.Добавить("info");

	ПараметрыЗапуска.Добавить("--licenses");

	ПараметрыЗапуска.Добавить(СтрШаблон("--process=%1", Процессы[0]["process"]));

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["РабочиеПроцессы.Лицензии"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_РабочиеПроцессыЛицензииСписок()

Функция Вывод_СервисыСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("service");
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["Сервисы"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_СервисыСписок()

Функция Вывод_ИБСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("infobase");
	ПараметрыЗапуска.Добавить("summary");
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["ИнформационныеБазы"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_ИБСписок()

Функция Вывод_ИБСокращенныеПараметры()
	
	Результат = Новый Массив();

	ИБ = РазобратьВыводКоманды(ВозвращаемыеЗначения["ИнформационныеБазы"]);

	Для Каждого ТекИб Из ИБ Цикл

		ПараметрыЗапуска = Новый Массив();
		ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

		ПараметрыЗапуска.Добавить("infobase");
		ПараметрыЗапуска.Добавить("summary");
		ПараметрыЗапуска.Добавить("info");
			
		ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
		ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

		ПараметрыЗапуска.Добавить(СтрШаблон("--infobase=%1", ТекИБ["infobase"]));
		ПараметрыЗапуска.Добавить("");
			
		ВыводКоманды = "";

		Текст = Новый ТекстовыйДокумент();
		Текст.УстановитьТекст(ТекИБ["ТекстОбъекта"]);

		Для й = 1 По Текст.КоличествоСтрок() Цикл
			ТекстСтроки = Текст.ПолучитьСтроку(й);
			ИмяПоля = Лев(ТекстСтроки, 4);

			Если НЕ (ИмяПоля = "name" ИЛИ ИмяПоля = "info" ИЛИ ИмяПоля = "desc") Тогда
				Продолжить;
			КонецЕсли;

			ВыводКоманды = ВыводКоманды + ТекстСтроки + Символы.ПС;
		КонецЦикла;

		ВыводКоманды = ВыводКоманды + Символы.ПС;
		
		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды));

	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_ИБСокращенныеПараметры()

Функция Вывод_ИБПолныеПараметры()
	
	Результат = Новый Массив();

	ИБ = РазобратьВыводКоманды(ВозвращаемыеЗначения["ИнформационныеБазы"]);

	Для Каждого ТекИб Из ИБ Цикл

		ПараметрыЗапуска = Новый Массив();
		ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

		ПараметрыЗапуска.Добавить("infobase");
		ПараметрыЗапуска.Добавить("info");
			
		ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
		ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

		ПараметрыЗапуска.Добавить(СтрШаблон("--infobase=%1", ТекИБ["infobase"]));
		ПараметрыЗапуска.Добавить(ИБ_СтрокаАвторизации());
			
		ВыводКоманды = ТекИБ["ТекстОбъекта"];

		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды));

	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_ИБПолныеПараметры()

Функция Вывод_ИБНедостаточноПрав()
	
	Результат = Новый Массив();

	ИБ = РазобратьВыводКоманды(ВозвращаемыеЗначения["ИнформационныеБазы"]);

	Для Каждого ТекИб Из ИБ Цикл

		ПараметрыЗапуска = Новый Массив();
		ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

		ПараметрыЗапуска.Добавить("infobase");
		ПараметрыЗапуска.Добавить("info");
			
		ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
		ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

		ПараметрыЗапуска.Добавить(СтрШаблон("--infobase=%1", ТекИБ["infobase"]));
		ПараметрыЗапуска.Добавить("");
	
		ВыводКоманды = СтрШаблон("Недостаточно прав пользователя для доступа к базе %1", ТекИБ["name"]);
	
		Результат.Добавить(Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды));

	КонецЦикла;

	Возврат Результат;

КонецФункции // Вывод_ИБПолныеПараметры()

Функция Вывод_СеансыСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("session");
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["Сеансы"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_СеансыСписок()

Функция Вывод_СеансыПараметры()
	
	Сеансы = РазобратьВыводКоманды(ВозвращаемыеЗначения["Сеансы"]);

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("session");
	ПараметрыЗапуска.Добавить("info");

	ПараметрыЗапуска.Добавить(СтрШаблон("--session=%1", Сеансы[0]["session"]));

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = Сеансы[0]["ТекстОбъекта"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_СеансыПараметры()

Функция Вывод_СеансыЛицензииСписок()
	
	Сеансы = РазобратьВыводКоманды(ВозвращаемыеЗначения["Сеансы"]);

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("session");
	ПараметрыЗапуска.Добавить("info");

	ПараметрыЗапуска.Добавить("--licenses");

	ПараметрыЗапуска.Добавить(СтрШаблон("--session=%1", Сеансы[0]["session"]));

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["Сеансы.Лицензии"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_СеансыЛицензииСписок()

Функция Вывод_СоединенияСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("connection");
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["Соединения"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_СоединенияСписок()

Функция Вывод_БлокировкиСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("lock");
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["Блокировки"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_СоединенияСписок()

Функция Вывод_НазначенияФункциональностиСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("rule");
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--server=%1", Сервер_Ид()));
	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["НазначенияФункциональности"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_НазначенияФункциональностиСписок()

Функция Вывод_НазначенияФункциональностиПараметры()
	
	Назначения = РазобратьВыводКоманды(ВозвращаемыеЗначения["НазначенияФункциональности"]);

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("rule");
	ПараметрыЗапуска.Добавить("info");

	ПараметрыЗапуска.Добавить(СтрШаблон("--server=%1", Сервер_Ид()));
	
	ПараметрыЗапуска.Добавить(СтрШаблон("--rule=%1", Назначения[0]["rule"]));

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = Назначения[0]["ТекстОбъекта"];

	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_НазначенияФункциональностиПараметры()

Функция Вывод_ПрофилиБезопасностиСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());
	
	ПараметрыЗапуска.Добавить("profile");
	ПараметрыЗапуска.Добавить("list");
	
	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());
	
	ВыводКоманды = ВозвращаемыеЗначения["ПрофилиБезопасности"];
	
	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_ПрофилиБезопасностиСписок()

Функция Вывод_ПрофилиБезопасностиПараметры()
	
	Профили = РазобратьВыводКоманды(ВозвращаемыеЗначения["ПрофилиБезопасности"]);

	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());
	
	ПараметрыЗапуска.Добавить("profile");
	ПараметрыЗапуска.Добавить("info");
	
	ПараметрыЗапуска.Добавить(СтрШаблон("--name=%1", ПрофильБезопасности_Имя()));

	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());
	
	ВыводКоманды = Профили[0]["ТекстОбъекта"];

	Тест = РазобратьВыводКоманды(ВыводКоманды);
	
	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_ПрофилиБезопасностиСписок()

Функция Вывод_ПрофилиБезопасностиКаталогиСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("profile");
	ПараметрыЗапуска.Добавить("acl");
	ПараметрыЗапуска.Добавить(Перечисления.ВидыОбъектовПрофиляБезопасности.Каталог);
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--name=%1", ПрофильБезопасности_Имя()));
	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["ПрофилиБезопасности.Каталоги"];
	
	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_ПрофилиБезопасностиКаталогиСписок()

Функция Вывод_ПрофилиБезопасностиCOMКлассыСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("profile");
	ПараметрыЗапуска.Добавить("acl");
	ПараметрыЗапуска.Добавить(Перечисления.ВидыОбъектовПрофиляБезопасности.COMКласс);
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--name=%1", ПрофильБезопасности_Имя()));
	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["ПрофилиБезопасности.COMКлассы"];
	
	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_ПрофилиБезопасностиCOMКлассыСписок()

Функция Вывод_ПрофилиБезопасностиКомпонентыСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("profile");
	ПараметрыЗапуска.Добавить("acl");
	ПараметрыЗапуска.Добавить(Перечисления.ВидыОбъектовПрофиляБезопасности.Компонент);
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--name=%1", ПрофильБезопасности_Имя()));
	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["ПрофилиБезопасности.Компоненты"];
	
	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_ПрофилиБезопасностиКаталогиСписок()

Функция Вывод_ПрофилиБезопасностиМодулиСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("profile");
	ПараметрыЗапуска.Добавить("acl");
	ПараметрыЗапуска.Добавить(Перечисления.ВидыОбъектовПрофиляБезопасности.Модуль);
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--name=%1", ПрофильБезопасности_Имя()));
	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["ПрофилиБезопасности.Модули"];
	
	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_ПрофилиБезопасностиМодулиСписок()

Функция Вывод_ПрофилиБезопасностиПриложенияСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("profile");
	ПараметрыЗапуска.Добавить("acl");
	ПараметрыЗапуска.Добавить(Перечисления.ВидыОбъектовПрофиляБезопасности.Приложение);
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--name=%1", ПрофильБезопасности_Имя()));
	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["ПрофилиБезопасности.Приложения"];
	
	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_ПрофилиБезопасностиПриложенияСписок()

Функция Вывод_ПрофилиБезопасностиИнтернетРесурсыСписок()
	
	ПараметрыЗапуска = Новый Массив();
	ПараметрыЗапуска.Добавить(Агент_СтрокаПодключения());

	ПараметрыЗапуска.Добавить("profile");
	ПараметрыЗапуска.Добавить("acl");
	ПараметрыЗапуска.Добавить(Перечисления.ВидыОбъектовПрофиляБезопасности.ИнтернетРесурс);
	ПараметрыЗапуска.Добавить("list");

	ПараметрыЗапуска.Добавить(СтрШаблон("--name=%1", ПрофильБезопасности_Имя()));
	ПараметрыЗапуска.Добавить(СтрШаблон("--cluster=%1", Кластер_Ид()));
	ПараметрыЗапуска.Добавить(Кластер_СтрокаАвторизации());

	ВыводКоманды = ВозвращаемыеЗначения["ПрофилиБезопасности.ИнтернетРесурсы"];
	
	Возврат Новый Структура("ПараметрыКоманды, ВыводКоманды", ПараметрыЗапуска, ВыводКоманды);

КонецФункции // Вывод_ПрофилиБезопасностиИнтернетРесурсыСписок()

Процедура Инициализация()
	
	Лог = Логирование.ПолучитьЛог("ktb.lib.irac");

	ПараметрыКластера = Новый Структура();
	ВозвращаемыеЗначения = ПрочитатьМакетыОбъектовСервера(ТекущийКаталог() + "/tests/fixtures");
	
	ПараметрыКластера.Вставить("Администраторы",
		Новый Структура("Список, Параметры, Добавить, Изменить, Удалить"));
	ПараметрыКластера.Администраторы.Список		= Вывод_АдминистраторыСписок();

	ПараметрыКластера.Вставить("Кластеры",
		Новый Структура("Список, Параметры, Администраторы, Добавить, Изменить, Удалить"));
	ПараметрыКластера.Кластеры.Список			= Вывод_КластерыСписок();
	ПараметрыКластера.Кластеры.Параметры		= Вывод_КластерыПараметры();
	ПараметрыКластера.Кластеры.Администраторы	= Новый Структура("Список, Параметры, Добавить, Изменить, Удалить");
	ПараметрыКластера.Кластеры.Администраторы.Список	= Вывод_КластерыАдминистраторыСписок();

	ПараметрыКластера.Вставить("Менеджеры",
		Новый Структура("Список, Параметры"));
	ПараметрыКластера.Менеджеры.Список		= Вывод_МенеджерыСписок();

	ПараметрыКластера.Вставить("Серверы",
		Новый Структура("Список, Параметры, Добавить, Изменить, Удалить"));
	ПараметрыКластера.Серверы.Список	= Вывод_СерверыСписок();
	ПараметрыКластера.Серверы.Параметры	= Вывод_СерверыПараметры();

	ПараметрыКластера.Вставить("РабочиеПроцессы",
		Новый Структура("Список, Параметры, Лицензии"));
	ПараметрыКластера.РабочиеПроцессы.Список	= Вывод_РабочиеПроцессыСписок();
	ПараметрыКластера.РабочиеПроцессы.Параметры	= Вывод_РабочиеПроцессыПараметры();
	ПараметрыКластера.РабочиеПроцессы.Лицензии	= Новый Структура("Список", Вывод_РабочиеПроцессыЛицензииСписок());

	ПараметрыКластера.Вставить("Сервисы",
		Новый Структура("Список, Параметры"));
		ПараметрыКластера.Сервисы.Список	= Вывод_СервисыСписок();

	ПараметрыКластера.Вставить("Сеансы",
		Новый Структура("Список, Параметры, Лицензии"));
	ПараметрыКластера.Сеансы.Список		= Вывод_СеансыСписок();
	ПараметрыКластера.Сеансы.Параметры	= Вывод_СеансыПараметры();
	ПараметрыКластера.Сеансы.Лицензии	= Новый Структура("Список", Вывод_СеансыЛицензииСписок());

	ПараметрыКластера.Вставить("Соединения",
		Новый Структура("Список, Параметры"));
	ПараметрыКластера.Соединения.Список		= Вывод_СоединенияСписок();

	ПараметрыКластера.Вставить("Блокировки",
		Новый Структура("Список, Параметры"));
	ПараметрыКластера.Блокировки.Список		= Вывод_БлокировкиСписок();

	ПараметрыКластера.Вставить("ИБ",
		Новый Структура("Список, СокращенныеПараметры, ПолныеПараметры, НедостаточноПрав, Добавить, Изменить, Удалить"));
	ПараметрыКластера.ИБ.Список					= Вывод_ИБСписок();
	ПараметрыКластера.ИБ.СокращенныеПараметры	= Вывод_ИБСокращенныеПараметры();
	ПараметрыКластера.ИБ.ПолныеПараметры		= Вывод_ИБПолныеПараметры();
	ПараметрыКластера.ИБ.НедостаточноПрав		= Вывод_ИБНедостаточноПрав();

	ПараметрыКластера.Вставить("НазначенияФункциональности",
		Новый Структура("Список, Параметры, Добавить, Изменить, Удалить"));
	ПараметрыКластера.НазначенияФункциональности.Список		= Вывод_НазначенияФункциональностиСписок();
	ПараметрыКластера.НазначенияФункциональности.Параметры	= Вывод_НазначенияФункциональностиПараметры();

	СтруктураПрофилей = Новый Структура("Список,
										|Параметры,
										|Добавить,
										|Изменить,
										|Удалить,
										|Каталоги,
										|COMКлассы,
										|Компоненты,
										|Модули,
										|Приложения,
										|ИнтернетРесурсы");

	СтруктураПрофилей.Список			= Вывод_ПрофилиБезопасностиСписок();
	СтруктураПрофилей.Параметры			= Вывод_ПрофилиБезопасностиПараметры();
	СтруктураПрофилей.Каталоги			= Новый Структура("Список, Параметры",
														Вывод_ПрофилиБезопасностиКаталогиСписок());
	СтруктураПрофилей.COMКлассы			= Новый Структура("Список, Параметры",
														Вывод_ПрофилиБезопасностиCOMКлассыСписок());
	СтруктураПрофилей.Компоненты		= Новый Структура("Список, Параметры",
														Вывод_ПрофилиБезопасностиКомпонентыСписок());
	СтруктураПрофилей.Модули			= Новый Структура("Список, Параметры",
														Вывод_ПрофилиБезопасностиМодулиСписок());
	СтруктураПрофилей.Приложения		= Новый Структура("Список, Параметры",
														Вывод_ПрофилиБезопасностиПриложенияСписок());
	СтруктураПрофилей.ИнтернетРесурсы	= Новый Структура("Список, Параметры",
														Вывод_ПрофилиБезопасностиИнтернетРесурсыСписок());
	
	ПараметрыКластера.Вставить("ПрофилиБезопасности", СтруктураПрофилей);

КонецПроцедуры // Инициализация()

Функция ПрочитатьМакетыОбъектовСервера(Знач ПутьККаталогу)

	СтруктураМакетов = Новый Соответствие();

	МассивФайлов = НайтиФайлы(ПутьККаталогу, "Макет_*.txt");

	ДлинаПрефикса = 7;

	Для Каждого ТекМакет Из МассивФайлов Цикл
		ТекстМакета = Новый ТекстовыйДокумент();
		ТекстМакета.Прочитать(ТекМакет.ПолноеИмя, КодировкаТекста.UTF8);

		СтруктураМакетов.Вставить(Сред(ТекМакет.ИмяБезРасширения, ДлинаПрефикса), ТекстМакета.ПолучитьТекст());
	КонецЦикла;

	Возврат СтруктураМакетов;

КонецФункции // ПрочитатьМакетыОбъектовСервера()

// Функция преобразует переданный текст вывода команды в массив соответствий
// элементы массива создаются по блокам текста, разделенным пустой строкой
// пары <ключ, значение> структуры получаются для каждой строки с учетом разделителя ":"
//   
// Параметры:
//   ВыводКоманды			- Строка			- текст для разбора
//   
// Возвращаемое значение:
//	Массив (Соответствие) - результат разбора
//
Функция РазобратьВыводКоманды(Знач ВыводКоманды)
	
	Текст = Новый ТекстовыйДокумент();
	Текст.УстановитьТекст(ВыводКоманды);

	МассивРезультатов = Новый Массив();
	Описание = Новый Соответствие();

	ТекстОбъекта = "";

	Для й = 1 По Текст.КоличествоСтрок() Цикл

		ТекстСтроки = Текст.ПолучитьСтроку(й);
		
		ПозРазделителя = СтрНайти(ТекстСтроки, ":");

		Если НЕ ЗначениеЗаполнено(ТекстСтроки) Тогда
			Если й = 1 Тогда
				Продолжить;
			КонецЕсли;
			Описание.Вставить("ТекстОбъекта", ТекстОбъекта + Символы.ПС);
			МассивРезультатов.Добавить(Описание);
			Описание = Новый Соответствие();
			ТекстОбъекта = "";
			Продолжить;
		ИначеЕсли ПозРазделителя = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Описание.Вставить(СокрЛП(Лев(ТекстСтроки, ПозРазделителя - 1)), СокрЛП(Сред(ТекстСтроки, ПозРазделителя + 1)));
		ТекстОбъекта = ТекстОбъекта + ТекстСтроки + Символы.ПС;

	КонецЦикла;

	Возврат МассивРезультатов;

КонецФункции // РазобратьВыводКоманды()

Инициализация();